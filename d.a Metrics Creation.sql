CALL observability_setup.setup_procedures_v1.OBSERVABILITY_METRICS_CREATE_PROCEDURE();
   create or replace procedure observability_setup.setup_procedures_v1.OBSERVABILITY_METRICS_CREATE_PROCEDURE()
      returns string
      language javascript
      execute as caller
    AS
    $$
    
    var query_account = "SELECT CURRENT_ACCOUNT()";
    var statement = snowflake.createStatement({sqlText: query_account});
    var account = statement.execute();
    account.next();
    account_name = account.getColumnValue(1);

    var query_db = "SELECT CURRENT_ACCOUNT()|| '_OBSERVABILITY'";
    var statement1 = snowflake.createStatement({sqlText: query_db});
    var db = statement1.execute();
    db.next();
    db_name = db.getColumnValue(1);
          
    var query = `
      BEGIN
      INSERT INTO ` + db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS(
      WITH WAREHOUSE_SIZES AS (
        SELECT 'X-Small' AS WAREHOUSE_SIZE, 1 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Small' AS WAREHOUSE_SIZE, 2 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Medium'  AS WAREHOUSE_SIZE, 4 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Large' AS WAREHOUSE_SIZE, 8 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'X-Large' AS WAREHOUSE_SIZE, 16 AS CREDITS_PER_HOUR UNION ALL
        SELECT '2X-Large' AS WAREHOUSE_SIZE, 32 AS CREDITS_PER_HOUR UNION ALL
        SELECT '3X-Large' AS WAREHOUSE_SIZE, 64 AS CREDITS_PER_HOUR UNION ALL
        SELECT '4X-Large' AS WAREHOUSE_SIZE, 128 AS CREDITS_PER_HOUR
      ),
      QUERY AS (
        SELECT CURRENT_ACCOUNT() AS ACCOUNT,
          'LONG_RUNNING_QUERY' AS METRICNAME,
          QH.WAREHOUSE_NAME AS DESCRIPTION,
          START_TIME AS TIMESTAMP,
          QUERY_ID QUERYID,
          ROUND(INBOUND_DATA_TRANSFER_BYTES/1024/1024/1024/1024) AS DATATRANSFER,
          EXECUTION_TIME/(1000*60*60)*WH.CREDITS_PER_HOUR*2 AS COMPUTECOST,
          CASE WHEN (QH.WAREHOUSE_SIZE = 'X-Small' 
            OR QH.WAREHOUSE_SIZE = 'Small' 
            OR QH.WAREHOUSE_SIZE = 'Medium'
            OR QH.WAREHOUSE_SIZE = 'Large'
            OR QH.WAREHOUSE_SIZE = 'X-Large') AND EXECUTION_TIME > 21600000 THEN 1
            WHEN (QH.WAREHOUSE_SIZE = '2X-Large'
              OR QH.WAREHOUSE_SIZE = '3X-Large') AND EXECUTION_TIME > 14400000 THEN 1
            WHEN QH.WAREHOUSE_SIZE = '4X-Large' AND EXECUTION_TIME > 7200000 THEN 1
              ELSE 0 END AS LONGRUNNING_FLAG
        FROM TABLE(SNOWFLAKE.INFORMATION_SCHEMA.QUERY_HISTORY()) QH 
        INNER JOIN WAREHOUSE_SIZES WH
          ON QH.WAREHOUSE_SIZE=WH.WAREHOUSE_SIZE
        WHERE EXECUTION_STATUS='RUNNING'
            )
        SELECT ACCOUNT,
          METRICNAME,
          DESCRIPTION,
          TIMESTAMP,
          QUERYID,
          DATATRANSFER,
          NULL TOTALCOST,
          COMPUTECOST,
          NULL STORAGECOST,
          LONGRUNNING_FLAG LONGRUNNINGQUERY,
          NULL TOPWAREHOUSE ,
          NULL TOPUSER ,
          NULL TOPROLE ,
          NULL QUERYTIMEOUT ,
          NULL TASKCREDITS ,
          NULL WAREHOUSEPROVISION ,
          NULL QUERYQUEUEING ,
          NULL WAREHOUSEREPAIR ,
          NULL SERVICEACCOUNT ,
          NULL ADMINLOGIN ,
          NULL UNUSEDROLE ,
          NULL NOTALLOWEDUSER 
        FROM QUERY QH
        WHERE LONGRUNNING_FLAG = 1 
          AND NOT EXISTS (
            SELECT QUERYID
            FROM `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS OB
            WHERE QH.QUERYID = OB.QUERYID
              AND QH.METRICNAME = OB.METRICNAME)
            );
            
      
      --Data transfer
      INSERT INTO `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS (
      WITH WAREHOUSE_SIZES AS (
        SELECT 'X-Small' AS WAREHOUSE_SIZE, 1 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Small' AS WAREHOUSE_SIZE, 2 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Medium'  AS WAREHOUSE_SIZE, 4 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Large' AS WAREHOUSE_SIZE, 8 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'X-Large' AS WAREHOUSE_SIZE, 16 AS CREDITS_PER_HOUR UNION ALL
        SELECT '2X-Large' AS WAREHOUSE_SIZE, 32 AS CREDITS_PER_HOUR UNION ALL
        SELECT '3X-Large' AS WAREHOUSE_SIZE, 64 AS CREDITS_PER_HOUR UNION ALL
        SELECT '4X-Large' AS WAREHOUSE_SIZE, 128 AS CREDITS_PER_HOUR
      )
      ,QUERY AS (
        SELECT CURRENT_ACCOUNT() AS ACCOUNT,
          'DATATRANSFER' AS METRICNAME,
          NULL AS DESCRIPTION,
          START_TIME AS TIMESTAMP,
          QUERY_ID QUERYID,
          INBOUND_DATA_TRANSFER_BYTES/1024/1024/1024/1024 AS DATATRANSFER,
          NULL TOTALCOST,
          EXECUTION_TIME/(1000*60*60)*WH.CREDITS_PER_HOUR AS COMPUTECOST,
          NULL STORAGECOST,
          NULL LONGRUNNINGQUERY ,
          NULL TOPWAREHOUSE ,
          NULL TOPUSER ,
          NULL TOPROLE ,
          NULL QUERYTIMEOUT ,
          NULL TASKCREDITS ,
          NULL WAREHOUSEPROVISION ,
          NULL QUERYQUEUEING ,
          NULL WAREHOUSEREPAIR ,
          NULL SERVICEACCOUNT ,
          NULL ADMINLOGIN ,
          NULL UNUSEDROLE ,
          NULL NOTALLOWEDUSER 
        FROM TABLE(SNOWFLAKE.INFORMATION_SCHEMA.QUERY_HISTORY()) QH
        INNER JOIN WAREHOUSE_SIZES WH
          ON QH.WAREHOUSE_SIZE=WH.WAREHOUSE_SIZE)
        SELECT *
        FROM QUERY QH 
        WHERE DATATRANSFER >= 5 AND NOT EXISTS (
            SELECT QUERYID
            FROM `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS OB
            WHERE QH.ACCOUNT = OB.ACCOUNT
                AND QH.QUERYID = OB.QUERYID)
        ORDER BY DATATRANSFER DESC);
      
      --compute cost
      INSERT INTO `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS (
      WITH WAREHOUSE_SIZES AS (
        SELECT 'X-Small' AS WAREHOUSE_SIZE, 1 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Small' AS WAREHOUSE_SIZE, 2 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Medium'  AS WAREHOUSE_SIZE, 4 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Large' AS WAREHOUSE_SIZE, 8 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'X-Large' AS WAREHOUSE_SIZE, 16 AS CREDITS_PER_HOUR UNION ALL
        SELECT '2X-Large' AS WAREHOUSE_SIZE, 32 AS CREDITS_PER_HOUR UNION ALL
        SELECT '3X-Large' AS WAREHOUSE_SIZE, 64 AS CREDITS_PER_HOUR UNION ALL
        SELECT '4X-Large' AS WAREHOUSE_SIZE, 128 AS CREDITS_PER_HOUR
      ),
      COMPUTE AS (
        SELECT CURRENT_ACCOUNT() AS ACCOUNT,
          'COMPUTECOST' AS METRICNAME,
          START_TIME TIMESTAMP,
          ROLE_NAME || ' ' || USER_NAME AS DESCRIPTION,
          QUERY_ID QUERYID,
        ROUND(INBOUND_DATA_TRANSFER_BYTES/1024/1024/1024/1024) AS DATATRANSFER,
        EXECUTION_TIME/(1000*60*60)*WH.CREDITS_PER_HOUR*2 AS COMPUTECOST
        FROM TABLE(SNOWFLAKE.INFORMATION_SCHEMA.QUERY_HISTORY()) QH
        INNER JOIN WAREHOUSE_SIZES WH
          ON QH.WAREHOUSE_SIZE=WH.WAREHOUSE_SIZE
        )
      SELECT ACCOUNT,
          METRICNAME,
          DESCRIPTION,
          TIMESTAMP,
          QUERYID,
          DATATRANSFER,
          NULL TOTALCOST,
          COMPUTECOST,
          NULL STORAGECOST,
          NULL LONGRUNNINGQUERY ,
          NULL TOPWAREHOUSE ,
          NULL TOPUSER ,
          NULL TOPROLE ,
          NULL QUERYTIMEOUT ,
          NULL TASKCREDITS ,
          NULL WAREHOUSEPROVISION ,
          NULL QUERYQUEUEING ,
          NULL WAREHOUSEREPAIR ,
          NULL SERVICEACCOUNT ,
          NULL ADMINLOGIN ,
          NULL UNUSEDROLE ,
          NULL NOTALLOWEDUSER 
      FROM COMPUTE QH
      WHERE COMPUTECOST > 11.5 AND NOT EXISTS (
          SELECT QUERYID
          FROM `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS OB
          WHERE QH.ACCOUNT = OB.ACCOUNT 
            AND QH.TIMESTAMP = OB.TIMESTAMP
            AND QH.QUERYID = OB.QUERYID) );

      --top warehouse
      INSERT INTO `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS (
      WITH WAREHOUSE_SIZES AS (
        SELECT 'X-Small' AS WAREHOUSE_SIZE, 1 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Small' AS WAREHOUSE_SIZE, 2 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Medium'  AS WAREHOUSE_SIZE, 4 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Large' AS WAREHOUSE_SIZE, 8 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'X-Large' AS WAREHOUSE_SIZE, 16 AS CREDITS_PER_HOUR UNION ALL
        SELECT '2X-Large' AS WAREHOUSE_SIZE, 32 AS CREDITS_PER_HOUR UNION ALL
        SELECT '3X-Large' AS WAREHOUSE_SIZE, 64 AS CREDITS_PER_HOUR UNION ALL
        SELECT '4X-Large' AS WAREHOUSE_SIZE, 128 AS CREDITS_PER_HOUR
        ), QUERY AS(
        SELECT CURRENT_ACCOUNT() AS ACCOUNT,
          'TOPWAREHOUSE_MONTH' AS METRICNAME, 
         date_trunc('MONTH',MIN(DATE(START_TIME))) TIMESTAMP,
          NULL AS QUERYID,
          warehouse_name, 
          sum(EXECUTION_TIME/(1000*60*60)*WH.CREDITS_PER_HOUR*2) AS COMPUTECOST,
       --    ROW_NUMBER() OVER (ORDER BY EXECUTION_TIME  DESC) AS row_num
         SUM(INBOUND_DATA_TRANSFER_BYTES) AS DATATRANSFER,
         -- SUM(EXECUTION_TIME/(1000*60*60)*WH.CREDITS_PER_HOUR*2) AS COMPUTECOST
        FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY QH
        INNER JOIN WAREHOUSE_SIZES WH
            ON QH.WAREHOUSE_SIZE=WH.WAREHOUSE_SIZE
        WHERE USER_NAME != 'SYSTEM' 
          AND DATEDIFF(MONTH, START_TIME,CURRENT_DATE()) = 1
         GROUP BY all
       ORDER BY 6 DESC
        LIMIT 10)
      , DESCRIPTION AS (
        SELECT 
       ACCOUNT,
          METRICNAME, 
          TIMESTAMP,
          ' TOP 10 warehouse list'  AS DESCRIPTION,
          NULL AS QUERYID,
          '0' DATATRANSFER,
          NULL TOTALCOST,
          '0' COMPUTECOST,
          NULL STORAGECOST,
          NULL LONGRUNNINGQUERY ,
          ARRAY_AGG(CONCAT(warehouse_name, ': ', COMPUTECOST)) within group (ORDER BY COMPUTECOST DESC) TOPWAREHOUSE,
          NULL TOPUSER ,
          NULL TOPROLE ,
          NULL QUERYTIMEOUT ,
          NULL TASKCREDITS ,
          NULL WAREHOUSEPROVISION ,
          NULL QUERYQUEUEING ,
          NULL WAREHOUSEREPAIR ,
          NULL SERVICEACCOUNT ,
          NULL ADMINLOGIN ,
          NULL UNUSEDROLE ,
          NULL NOTALLOWEDUSER 
        FROM QUERY QH
        group by all)
      SELECT * 
      FROM DESCRIPTION QH
      WHERE NOT EXISTS (
        SELECT QUERYID
        FROM `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS OB
        WHERE QH.ACCOUNT = OB.ACCOUNT 
          AND QH.DESCRIPTION = OB.DESCRIPTION
            AND DATE(QH.TIMESTAMP) = DATE(OB.TIMESTAMP)
            )
          );
      
      INSERT INTO `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS (
      --weekly
      WITH WAREHOUSE_SIZES AS (
        SELECT 'X-Small' AS WAREHOUSE_SIZE, 1 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Small' AS WAREHOUSE_SIZE, 2 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Medium'  AS WAREHOUSE_SIZE, 4 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Large' AS WAREHOUSE_SIZE, 8 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'X-Large' AS WAREHOUSE_SIZE, 16 AS CREDITS_PER_HOUR UNION ALL
        SELECT '2X-Large' AS WAREHOUSE_SIZE, 32 AS CREDITS_PER_HOUR UNION ALL
        SELECT '3X-Large' AS WAREHOUSE_SIZE, 64 AS CREDITS_PER_HOUR UNION ALL
        SELECT '4X-Large' AS WAREHOUSE_SIZE, 128 AS CREDITS_PER_HOUR
        ), QUERY AS(
        SELECT CURRENT_ACCOUNT() AS ACCOUNT,
          'TOPWAREHOUSE_WEEK' AS METRICNAME, 
         date_trunc('WEEK',MIN(DATE(START_TIME))) TIMESTAMP,
          NULL AS QUERYID,
          warehouse_name, 
          sum(EXECUTION_TIME/(1000*60*60)*WH.CREDITS_PER_HOUR*2) AS COMPUTECOST,
       --    ROW_NUMBER() OVER (ORDER BY EXECUTION_TIME  DESC) AS row_num
         SUM(INBOUND_DATA_TRANSFER_BYTES) AS DATATRANSFER,
         -- SUM(EXECUTION_TIME/(1000*60*60)*WH.CREDITS_PER_HOUR*2) AS COMPUTECOST
        FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY QH
        INNER JOIN WAREHOUSE_SIZES WH
            ON QH.WAREHOUSE_SIZE=WH.WAREHOUSE_SIZE
        WHERE USER_NAME != 'SYSTEM' 
          AND DATEDIFF(WEEK, START_TIME,CURRENT_DATE()) = 1
         GROUP BY all
       ORDER BY 6 DESC
        LIMIT 10)
      , DESCRIPTION AS (
        SELECT 
       ACCOUNT,
          METRICNAME, 
          TIMESTAMP,
          ' TOP 10 warehouse list'  AS DESCRIPTION,
          NULL AS QUERYID,
          '0' DATATRANSFER,
          NULL TOTALCOST,
          '0' COMPUTECOST,
          NULL STORAGECOST,
          NULL LONGRUNNINGQUERY ,
          ARRAY_AGG(CONCAT(warehouse_name, ': ', COMPUTECOST)) within group (ORDER BY COMPUTECOST DESC) TOPWAREHOUSE,
          NULL TOPUSER ,
          NULL TOPROLE ,
          NULL QUERYTIMEOUT ,
          NULL TASKCREDITS ,
          NULL WAREHOUSEPROVISION ,
          NULL QUERYQUEUEING ,
          NULL WAREHOUSEREPAIR ,
          NULL SERVICEACCOUNT ,
          NULL ADMINLOGIN ,
          NULL UNUSEDROLE ,
          NULL NOTALLOWEDUSER 
        FROM QUERY QH
        group by all)
      SELECT * 
      FROM DESCRIPTION QH
      WHERE DESCRIPTION IS NOT NULL 
        AND NOT EXISTS (
          SELECT QUERYID
          FROM `+db_name+`.OBSERVABILITY_CORE.OBSERVABILITY_METRICS OB
          WHERE QH.ACCOUNT = OB.ACCOUNT 
            AND QH.DESCRIPTION = OB.DESCRIPTION
            AND DATE(QH.TIMESTAMP) = DATE(OB.TIMESTAMP))
        ); 

      --day
      INSERT INTO `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS (
      WITH WAREHOUSE_SIZES AS (
        SELECT 'X-Small' AS WAREHOUSE_SIZE, 1 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Small' AS WAREHOUSE_SIZE, 2 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Medium'  AS WAREHOUSE_SIZE, 4 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Large' AS WAREHOUSE_SIZE, 8 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'X-Large' AS WAREHOUSE_SIZE, 16 AS CREDITS_PER_HOUR UNION ALL
        SELECT '2X-Large' AS WAREHOUSE_SIZE, 32 AS CREDITS_PER_HOUR UNION ALL
        SELECT '3X-Large' AS WAREHOUSE_SIZE, 64 AS CREDITS_PER_HOUR UNION ALL
        SELECT '4X-Large' AS WAREHOUSE_SIZE, 128 AS CREDITS_PER_HOUR
        ), QUERY AS(
        SELECT CURRENT_ACCOUNT() AS ACCOUNT,
          'TOPWAREHOUSE_DAY' AS METRICNAME, 
         date_trunc('DAY',MIN(DATE(START_TIME))) TIMESTAMP,
          NULL AS QUERYID,
          warehouse_name, 
          sum(EXECUTION_TIME/(1000*60*60)*WH.CREDITS_PER_HOUR*2) AS COMPUTECOST,
       --    ROW_NUMBER() OVER (ORDER BY EXECUTION_TIME  DESC) AS row_num
         SUM(INBOUND_DATA_TRANSFER_BYTES) AS DATATRANSFER,
         -- SUM(EXECUTION_TIME/(1000*60*60)*WH.CREDITS_PER_HOUR*2) AS COMPUTECOST
        FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY QH
        INNER JOIN WAREHOUSE_SIZES WH
            ON QH.WAREHOUSE_SIZE=WH.WAREHOUSE_SIZE
        WHERE USER_NAME != 'SYSTEM' 
          AND DATEDIFF(DAY, START_TIME,CURRENT_DATE()) = 1
         GROUP BY all
       ORDER BY 6 DESC
        LIMIT 10)
      , DESCRIPTION AS (
        SELECT 
       ACCOUNT,
          METRICNAME, 
          TIMESTAMP,
          ' TOP 10 warehouse list'  AS DESCRIPTION,
          NULL AS QUERYID,
          '0' DATATRANSFER,
          NULL TOTALCOST,
          '0' COMPUTECOST,
          NULL STORAGECOST,
          NULL LONGRUNNINGQUERY ,
          ARRAY_AGG(CONCAT(warehouse_name, ': ', COMPUTECOST)) within group (ORDER BY COMPUTECOST DESC) TOPWAREHOUSE,
          NULL TOPUSER ,
          NULL TOPROLE ,
          NULL QUERYTIMEOUT ,
          NULL TASKCREDITS ,
          NULL WAREHOUSEPROVISION ,
          NULL QUERYQUEUEING ,
          NULL WAREHOUSEREPAIR ,
          NULL SERVICEACCOUNT ,
          NULL ADMINLOGIN ,
          NULL UNUSEDROLE ,
          NULL NOTALLOWEDUSER 
        FROM QUERY QH
        group by all)
      SELECT * 
      FROM DESCRIPTION QH
      WHERE DESCRIPTION IS NOT NULL 
        AND NOT EXISTS (
          SELECT QUERYID
          FROM `+db_name+`.OBSERVABILITY_CORE.OBSERVABILITY_METRICS OB
          WHERE QH.ACCOUNT = OB.ACCOUNT 
            AND QH.DESCRIPTION = OB.DESCRIPTION
            AND DATE(QH.TIMESTAMP) = DATE(OB.TIMESTAMP)
            )
        );
      
      --TOP USERS
      INSERT INTO `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS (
      WITH WAREHOUSE_SIZES AS (
        SELECT 'X-Small' AS WAREHOUSE_SIZE, 1 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Small' AS WAREHOUSE_SIZE, 2 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Medium'  AS WAREHOUSE_SIZE, 4 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Large' AS WAREHOUSE_SIZE, 8 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'X-Large' AS WAREHOUSE_SIZE, 16 AS CREDITS_PER_HOUR UNION ALL
        SELECT '2X-Large' AS WAREHOUSE_SIZE, 32 AS CREDITS_PER_HOUR UNION ALL
        SELECT '3X-Large' AS WAREHOUSE_SIZE, 64 AS CREDITS_PER_HOUR UNION ALL
        SELECT '4X-Large' AS WAREHOUSE_SIZE, 128 AS CREDITS_PER_HOUR
        ), QUERY AS(
        SELECT CURRENT_ACCOUNT() AS ACCOUNT,
          'TOPUSER_MONTH' AS METRICNAME, 
         date_trunc('MONTH',MIN(DATE(START_TIME))) TIMESTAMP,
          NULL AS QUERYID,
          USER_NAME, 
          sum(EXECUTION_TIME/(1000*60*60)*WH.CREDITS_PER_HOUR*2) AS COMPUTECOST,
       --    ROW_NUMBER() OVER (ORDER BY EXECUTION_TIME  DESC) AS row_num
         SUM(INBOUND_DATA_TRANSFER_BYTES) AS DATATRANSFER,
         -- SUM(EXECUTION_TIME/(1000*60*60)*WH.CREDITS_PER_HOUR*2) AS COMPUTECOST
        FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY QH
        INNER JOIN WAREHOUSE_SIZES WH
            ON QH.WAREHOUSE_SIZE=WH.WAREHOUSE_SIZE
        WHERE USER_NAME != 'SYSTEM' 
          AND DATEDIFF(MONTH, START_TIME,CURRENT_DATE()) = 1
         GROUP BY all
       ORDER BY 6 DESC
        LIMIT 10)
      , DESCRIPTION AS (
        SELECT 
       ACCOUNT,
          METRICNAME, 
          TIMESTAMP,
          ' TOP 10 users list'  AS DESCRIPTION,
          NULL AS QUERYID,
          '0' DATATRANSFER,
          NULL TOTALCOST,
          '0' COMPUTECOST,
          NULL STORAGECOST,
          NULL LONGRUNNINGQUERY ,
          NULL TOPWAREHOUSE ,
          ARRAY_AGG(CONCAT(user_name, ': ', COMPUTECOST)) within group (ORDER BY COMPUTECOST DESC) TOPUSER,
          NULL TOPROLE ,
          NULL QUERYTIMEOUT ,
          NULL TASKCREDITS ,
          NULL WAREHOUSEPROVISION ,
          NULL QUERYQUEUEING ,
          NULL WAREHOUSEREPAIR ,
          NULL SERVICEACCOUNT ,
          NULL ADMINLOGIN ,
          NULL UNUSEDROLE ,
          NULL NOTALLOWEDUSER 
        FROM QUERY QH
        group by all)
      SELECT *
      FROM DESCRIPTION QH
      WHERE DESCRIPTION IS NOT NULL 
        AND NOT EXISTS (
          SELECT QUERYID
          FROM `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS OB
          WHERE QH.ACCOUNT = OB.ACCOUNT 
            AND QH.DESCRIPTION = OB.DESCRIPTION
            AND DATE(QH.TIMESTAMP) = DATE(OB.TIMESTAMP)
            ));

        --WEEK
      INSERT INTO `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS (
      WITH WAREHOUSE_SIZES AS (
        SELECT 'X-Small' AS WAREHOUSE_SIZE, 1 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Small' AS WAREHOUSE_SIZE, 2 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Medium'  AS WAREHOUSE_SIZE, 4 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Large' AS WAREHOUSE_SIZE, 8 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'X-Large' AS WAREHOUSE_SIZE, 16 AS CREDITS_PER_HOUR UNION ALL
        SELECT '2X-Large' AS WAREHOUSE_SIZE, 32 AS CREDITS_PER_HOUR UNION ALL
        SELECT '3X-Large' AS WAREHOUSE_SIZE, 64 AS CREDITS_PER_HOUR UNION ALL
        SELECT '4X-Large' AS WAREHOUSE_SIZE, 128 AS CREDITS_PER_HOUR
        ), QUERY AS(
        SELECT CURRENT_ACCOUNT() AS ACCOUNT,
          'TOPUSER_WEEK' AS METRICNAME, 
         date_trunc('WEEK',MIN(DATE(START_TIME))) TIMESTAMP,
          NULL AS QUERYID,
          USER_NAME, 
          sum(EXECUTION_TIME/(1000*60*60)*WH.CREDITS_PER_HOUR*2) AS COMPUTECOST,
       --    ROW_NUMBER() OVER (ORDER BY EXECUTION_TIME  DESC) AS row_num
         SUM(INBOUND_DATA_TRANSFER_BYTES) AS DATATRANSFER,
         -- SUM(EXECUTION_TIME/(1000*60*60)*WH.CREDITS_PER_HOUR*2) AS COMPUTECOST
        FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY QH
        INNER JOIN WAREHOUSE_SIZES WH
            ON QH.WAREHOUSE_SIZE=WH.WAREHOUSE_SIZE
        WHERE USER_NAME != 'SYSTEM' 
          AND DATEDIFF(WEEK, START_TIME,CURRENT_DATE()) = 1
         GROUP BY all
       ORDER BY 6 DESC
        LIMIT 10)
      , DESCRIPTION AS (
        SELECT 
       ACCOUNT,
          METRICNAME, 
          TIMESTAMP,
          ' TOP 10 users list'  AS DESCRIPTION,
          NULL AS QUERYID,
          '0' DATATRANSFER,
          NULL TOTALCOST,
          '0' COMPUTECOST,
          NULL STORAGECOST,
          NULL LONGRUNNINGQUERY ,
          NULL TOPWAREHOUSE ,
          ARRAY_AGG(CONCAT(user_name, ': ', COMPUTECOST)) within group (ORDER BY COMPUTECOST DESC) TOPUSER,
          NULL TOPROLE ,
          NULL QUERYTIMEOUT ,
          NULL TASKCREDITS ,
          NULL WAREHOUSEPROVISION ,
          NULL QUERYQUEUEING ,
          NULL WAREHOUSEREPAIR ,
          NULL SERVICEACCOUNT ,
          NULL ADMINLOGIN ,
          NULL UNUSEDROLE ,
          NULL NOTALLOWEDUSER 
        FROM QUERY QH
        group by all)
      SELECT *
      FROM DESCRIPTION QH
      WHERE DESCRIPTION IS NOT NULL AND NOT EXISTS (
          SELECT QUERYID
          FROM `+db_name+`.OBSERVABILITY_CORE.OBSERVABILITY_METRICS OB
          WHERE QH.ACCOUNT = OB.ACCOUNT 
            AND QH.DESCRIPTION = OB.DESCRIPTION
            AND DATE(QH.TIMESTAMP) = DATE(OB.TIMESTAMP)
            )
          );
      
      --day
      INSERT INTO `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS (
      WITH WAREHOUSE_SIZES AS (
        SELECT 'X-Small' AS WAREHOUSE_SIZE, 1 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Small' AS WAREHOUSE_SIZE, 2 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Medium'  AS WAREHOUSE_SIZE, 4 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Large' AS WAREHOUSE_SIZE, 8 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'X-Large' AS WAREHOUSE_SIZE, 16 AS CREDITS_PER_HOUR UNION ALL
        SELECT '2X-Large' AS WAREHOUSE_SIZE, 32 AS CREDITS_PER_HOUR UNION ALL
        SELECT '3X-Large' AS WAREHOUSE_SIZE, 64 AS CREDITS_PER_HOUR UNION ALL
        SELECT '4X-Large' AS WAREHOUSE_SIZE, 128 AS CREDITS_PER_HOUR
        ), QUERY AS(
        SELECT CURRENT_ACCOUNT() AS ACCOUNT,
          'TOPUSER_DAY' AS METRICNAME, 
         date_trunc('DAY',MIN(DATE(START_TIME))) TIMESTAMP,
          NULL AS QUERYID,
          USER_NAME, 
          sum(EXECUTION_TIME/(1000*60*60)*WH.CREDITS_PER_HOUR*2) AS COMPUTECOST,
       --    ROW_NUMBER() OVER (ORDER BY EXECUTION_TIME  DESC) AS row_num
         SUM(INBOUND_DATA_TRANSFER_BYTES) AS DATATRANSFER,
         -- SUM(EXECUTION_TIME/(1000*60*60)*WH.CREDITS_PER_HOUR*2) AS COMPUTECOST
        FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY QH
        INNER JOIN WAREHOUSE_SIZES WH
            ON QH.WAREHOUSE_SIZE=WH.WAREHOUSE_SIZE
        WHERE USER_NAME != 'SYSTEM' 
          AND DATEDIFF(DAY, START_TIME,CURRENT_DATE()) = 1
         GROUP BY all
       ORDER BY 6 DESC
        LIMIT 10)
      , DESCRIPTION AS (
        SELECT 
       ACCOUNT,
          METRICNAME, 
          TIMESTAMP,
          ' TOP 10 users list'  AS DESCRIPTION,
          NULL AS QUERYID,
          '0' DATATRANSFER,
          NULL TOTALCOST,
          '0' COMPUTECOST,
          NULL STORAGECOST,
          NULL LONGRUNNINGQUERY ,
          NULL TOPWAREHOUSE ,
          ARRAY_AGG(CONCAT(user_name, ': ', COMPUTECOST)) within group (ORDER BY COMPUTECOST DESC) TOPUSER,
          NULL TOPROLE ,
          NULL QUERYTIMEOUT ,
          NULL TASKCREDITS ,
          NULL WAREHOUSEPROVISION ,
          NULL QUERYQUEUEING ,
          NULL WAREHOUSEREPAIR ,
          NULL SERVICEACCOUNT ,
          NULL ADMINLOGIN ,
          NULL UNUSEDROLE ,
          NULL NOTALLOWEDUSER 
        FROM QUERY QH
        group by all)
      SELECT *
      FROM DESCRIPTION QH
      WHERE DESCRIPTION IS NOT NULL 
        AND NOT EXISTS (
          SELECT QUERYID
          FROM `+db_name+`.OBSERVABILITY_CORE.OBSERVABILITY_METRICS OB
          WHERE QH.ACCOUNT = OB.ACCOUNT 
            AND QH.DESCRIPTION = OB.DESCRIPTION
            AND DATE(QH.TIMESTAMP) = DATE(OB.TIMESTAMP)
            )
          );

      --TOP ROLES
      INSERT INTO `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS (
      WITH WAREHOUSE_SIZES AS (
        SELECT 'X-Small' AS WAREHOUSE_SIZE, 1 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Small' AS WAREHOUSE_SIZE, 2 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Medium'  AS WAREHOUSE_SIZE, 4 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Large' AS WAREHOUSE_SIZE, 8 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'X-Large' AS WAREHOUSE_SIZE, 16 AS CREDITS_PER_HOUR UNION ALL
        SELECT '2X-Large' AS WAREHOUSE_SIZE, 32 AS CREDITS_PER_HOUR UNION ALL
        SELECT '3X-Large' AS WAREHOUSE_SIZE, 64 AS CREDITS_PER_HOUR UNION ALL
        SELECT '4X-Large' AS WAREHOUSE_SIZE, 128 AS CREDITS_PER_HOUR
        ), QUERY AS(
        SELECT CURRENT_ACCOUNT() AS ACCOUNT,
          'TOPROLE_MONTH' AS METRICNAME, 
         date_trunc('MONTH',MIN(DATE(START_TIME))) TIMESTAMP,
          NULL AS QUERYID,
          ROLE_NAME, 
          sum(EXECUTION_TIME/(1000*60*60)*WH.CREDITS_PER_HOUR*2) AS COMPUTECOST,
       --    ROW_NUMBER() OVER (ORDER BY EXECUTION_TIME  DESC) AS row_num
         SUM(INBOUND_DATA_TRANSFER_BYTES) AS DATATRANSFER,
         -- SUM(EXECUTION_TIME/(1000*60*60)*WH.CREDITS_PER_HOUR*2) AS COMPUTECOST
        FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY QH
        INNER JOIN WAREHOUSE_SIZES WH
            ON QH.WAREHOUSE_SIZE=WH.WAREHOUSE_SIZE
        WHERE USER_NAME != 'SYSTEM' 
          AND DATEDIFF(MONTH, START_TIME,CURRENT_DATE()) = 1
         GROUP BY all
       ORDER BY 6 DESC
        LIMIT 10)
      , DESCRIPTION AS (
        SELECT 
       ACCOUNT,
          METRICNAME, 
          TIMESTAMP,
          ' TOP 10 role list'  AS DESCRIPTION,
          NULL AS QUERYID,
          '0' DATATRANSFER,
          NULL TOTALCOST,
          '0' COMPUTECOST,
          NULL STORAGECOST,
          NULL LONGRUNNINGQUERY ,
          NULL TOPWAREHOUSE,
          NULL TOPUSER ,
          ARRAY_AGG(CONCAT(ROLE_NAME, ': ', COMPUTECOST)) within group (ORDER BY COMPUTECOST DESC) TOPROLE,
          NULL QUERYTIMEOUT ,
          NULL TASKCREDITS ,
          NULL WAREHOUSEPROVISION ,
          NULL QUERYQUEUEING ,
          NULL WAREHOUSEREPAIR ,
          NULL SERVICEACCOUNT ,
          NULL ADMINLOGIN ,
          NULL UNUSEDROLE ,
          NULL NOTALLOWEDUSER 
        FROM QUERY QH
        group by all)
      SELECT *
      FROM DESCRIPTION QH
      WHERE DESCRIPTION IS NOT NULL 
        AND NOT EXISTS (
          SELECT QUERYID
          FROM `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS OB
          WHERE QH.ACCOUNT = OB.ACCOUNT 
            AND QH.DESCRIPTION = OB.DESCRIPTION
            AND DATE(QH.TIMESTAMP) = DATE(OB.TIMESTAMP)
            )
          );

      --week
      INSERT INTO `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS (
      WITH WAREHOUSE_SIZES AS (
        SELECT 'X-Small' AS WAREHOUSE_SIZE, 1 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Small' AS WAREHOUSE_SIZE, 2 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Medium'  AS WAREHOUSE_SIZE, 4 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Large' AS WAREHOUSE_SIZE, 8 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'X-Large' AS WAREHOUSE_SIZE, 16 AS CREDITS_PER_HOUR UNION ALL
        SELECT '2X-Large' AS WAREHOUSE_SIZE, 32 AS CREDITS_PER_HOUR UNION ALL
        SELECT '3X-Large' AS WAREHOUSE_SIZE, 64 AS CREDITS_PER_HOUR UNION ALL
        SELECT '4X-Large' AS WAREHOUSE_SIZE, 128 AS CREDITS_PER_HOUR
        ), QUERY AS(
        SELECT CURRENT_ACCOUNT() AS ACCOUNT,
          'TOPROLE_WEEK' AS METRICNAME, 
         date_trunc('WEEK',MIN(DATE(START_TIME))) TIMESTAMP,
          NULL AS QUERYID,
          ROLE_NAME, 
          sum(EXECUTION_TIME/(1000*60*60)*WH.CREDITS_PER_HOUR*2) AS COMPUTECOST,
       --    ROW_NUMBER() OVER (ORDER BY EXECUTION_TIME  DESC) AS row_num
         SUM(INBOUND_DATA_TRANSFER_BYTES) AS DATATRANSFER,
         -- SUM(EXECUTION_TIME/(1000*60*60)*WH.CREDITS_PER_HOUR*2) AS COMPUTECOST
        FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY QH
        INNER JOIN WAREHOUSE_SIZES WH
            ON QH.WAREHOUSE_SIZE=WH.WAREHOUSE_SIZE
        WHERE USER_NAME != 'SYSTEM' 
          AND DATEDIFF(WEEK, START_TIME,CURRENT_DATE()) = 1
         GROUP BY all
       ORDER BY 6 DESC
        LIMIT 10)
      , DESCRIPTION AS (
        SELECT 
       ACCOUNT,
          METRICNAME, 
          TIMESTAMP,
          ' TOP 10 role list'  AS DESCRIPTION,
          NULL AS QUERYID,
          '0' DATATRANSFER,
          NULL TOTALCOST,
          '0' COMPUTECOST,
          NULL STORAGECOST,
          NULL LONGRUNNINGQUERY ,
          NULL TOPWAREHOUSE,
          NULL TOPUSER ,
          ARRAY_AGG(CONCAT(ROLE_NAME, ': ', COMPUTECOST)) within group (ORDER BY COMPUTECOST DESC) TOPROLE,
          NULL QUERYTIMEOUT ,
          NULL TASKCREDITS ,
          NULL WAREHOUSEPROVISION ,
          NULL QUERYQUEUEING ,
          NULL WAREHOUSEREPAIR ,
          NULL SERVICEACCOUNT ,
          NULL ADMINLOGIN ,
          NULL UNUSEDROLE ,
          NULL NOTALLOWEDUSER 
        FROM QUERY QH
        group by all)
      SELECT *
      FROM DESCRIPTION QH
      WHERE DESCRIPTION IS NOT NULL
        AND NOT EXISTS (
          SELECT QUERYID
          FROM `+db_name+`.OBSERVABILITY_CORE.OBSERVABILITY_METRICS OB
          WHERE QH.ACCOUNT = OB.ACCOUNT 
            AND QH.DESCRIPTION = OB.DESCRIPTION
            AND DATE(QH.TIMESTAMP) = DATE(OB.TIMESTAMP)
            )
          );

      --day
      INSERT INTO `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS (
      WITH WAREHOUSE_SIZES AS (
        SELECT 'X-Small' AS WAREHOUSE_SIZE, 1 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Small' AS WAREHOUSE_SIZE, 2 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Medium'  AS WAREHOUSE_SIZE, 4 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Large' AS WAREHOUSE_SIZE, 8 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'X-Large' AS WAREHOUSE_SIZE, 16 AS CREDITS_PER_HOUR UNION ALL
        SELECT '2X-Large' AS WAREHOUSE_SIZE, 32 AS CREDITS_PER_HOUR UNION ALL
        SELECT '3X-Large' AS WAREHOUSE_SIZE, 64 AS CREDITS_PER_HOUR UNION ALL
        SELECT '4X-Large' AS WAREHOUSE_SIZE, 128 AS CREDITS_PER_HOUR
        ), QUERY AS(
        SELECT CURRENT_ACCOUNT() AS ACCOUNT,
          'TOPROLE_DAY' AS METRICNAME, 
         date_trunc('DAY',MIN(DATE(START_TIME))) TIMESTAMP,
          NULL AS QUERYID,
          ROLE_NAME, 
          sum(EXECUTION_TIME/(1000*60*60)*WH.CREDITS_PER_HOUR*2) AS COMPUTECOST,
       --    ROW_NUMBER() OVER (ORDER BY EXECUTION_TIME  DESC) AS row_num
         SUM(INBOUND_DATA_TRANSFER_BYTES) AS DATATRANSFER,
         -- SUM(EXECUTION_TIME/(1000*60*60)*WH.CREDITS_PER_HOUR*2) AS COMPUTECOST
        FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY QH
        INNER JOIN WAREHOUSE_SIZES WH
            ON QH.WAREHOUSE_SIZE=WH.WAREHOUSE_SIZE
        WHERE USER_NAME != 'SYSTEM' 
          AND DATEDIFF(DAY, START_TIME,CURRENT_DATE()) = 1
         GROUP BY all
       ORDER BY 6 DESC
        LIMIT 10)
      , DESCRIPTION AS (
        SELECT 
       ACCOUNT,
          METRICNAME, 
          TIMESTAMP,
          ' TOP 10 role list'  AS DESCRIPTION,
          NULL AS QUERYID,
          '0' DATATRANSFER,
          NULL TOTALCOST,
          '0' COMPUTECOST,
          NULL STORAGECOST,
          NULL LONGRUNNINGQUERY ,
          NULL TOPWAREHOUSE,
          NULL TOPUSER ,
          ARRAY_AGG(CONCAT(ROLE_NAME, ': ', COMPUTECOST)) within group (ORDER BY COMPUTECOST DESC) TOPROLE,
          NULL QUERYTIMEOUT ,
          NULL TASKCREDITS ,
          NULL WAREHOUSEPROVISION ,
          NULL QUERYQUEUEING ,
          NULL WAREHOUSEREPAIR ,
          NULL SERVICEACCOUNT ,
          NULL ADMINLOGIN ,
          NULL UNUSEDROLE ,
          NULL NOTALLOWEDUSER 
        FROM QUERY QH
        group by all)
      SELECT *
      FROM DESCRIPTION QH
      WHERE DESCRIPTION IS NOT NULL 
        AND NOT EXISTS (
          SELECT QUERYID
          FROM `+db_name+`.OBSERVABILITY_CORE.OBSERVABILITY_METRICS OB
          WHERE QH.ACCOUNT = OB.ACCOUNT 
            AND QH.DESCRIPTION = OB.DESCRIPTION
            AND DATE(QH.TIMESTAMP) = DATE(OB.TIMESTAMP)
            )
        );

      --timeout
      INSERT INTO `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS (
      WITH WAREHOUSE_SIZES AS (
        SELECT 'X-Small' AS WAREHOUSE_SIZE, 1 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Small' AS WAREHOUSE_SIZE, 2 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Medium'  AS WAREHOUSE_SIZE, 4 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Large' AS WAREHOUSE_SIZE, 8 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'X-Large' AS WAREHOUSE_SIZE, 16 AS CREDITS_PER_HOUR UNION ALL
        SELECT '2X-Large' AS WAREHOUSE_SIZE, 32 AS CREDITS_PER_HOUR UNION ALL
        SELECT '3X-Large' AS WAREHOUSE_SIZE, 64 AS CREDITS_PER_HOUR UNION ALL
        SELECT '4X-Large' AS WAREHOUSE_SIZE, 128 AS CREDITS_PER_HOUR
      )
      ,QUERY AS (
      SELECT CURRENT_ACCOUNT() AS ACCOUNT,
          'TIMEOUTQUERY' AS METRICNAME,
          START_TIME TIMESTAMP,
          NULL AS DESCRIPTION,
          QUERY_ID QUERYID,
        ROUND(INBOUND_DATA_TRANSFER_BYTES/1024/1024/1024/1024) AS DATATRANSFER,
        EXECUTION_TIME/(1000*60*60)*WH.CREDITS_PER_HOUR*2 AS COMPUTECOST
      FROM TABLE(SNOWFLAKE.INFORMATION_SCHEMA.QUERY_HISTORY()) QH
      INNER JOIN WAREHOUSE_SIZES WH
          ON QH.WAREHOUSE_SIZE=WH.WAREHOUSE_SIZE
      WHERE EXECUTION_STATUS = 'FAILED_WITH_ERROR' AND ERROR_CODE = 630
      )
      SELECT ACCOUNT,
        METRICNAME, 
        TIMESTAMP,
        DESCRIPTION,
        QUERYID,
        DATATRANSFER,
        NULL TOTALCOST,
        COMPUTECOST,
        NULL STORAGECOST,
        NULL LONGRUNNINGQUERY ,
        NULL TOPWAREHOUSE ,
        NULL TOPUSER ,
        NULL TOPROLE ,
        QUERYID QUERYTIMEOUT ,
        NULL TASKCREDITS ,
        NULL WAREHOUSEPROVISION ,
        NULL QUERYQUEUEING ,
        NULL WAREHOUSEREPAIR ,
        NULL SERVICEACCOUNT ,
        NULL ADMINLOGIN ,
        NULL UNUSEDROLE ,
        NULL NOTALLOWEDUSER 
      FROM QUERY QH
      WHERE DATEDIFF(DAY, TIMESTAMP,CURRENT_DATE()) = 1 AND NOT EXISTS (
          SELECT QUERYID
          FROM `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS OB
          WHERE QH.ACCOUNT = OB.ACCOUNT 
            AND QH.QUERYID = OB.QUERYID)
          );
          
      --TASK CREDITS
      INSERT INTO `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS (
      WITH WAREHOUSE_SIZES AS (
        SELECT 'X-Small' AS WAREHOUSE_SIZE, 1 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Small' AS WAREHOUSE_SIZE, 2 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Medium'  AS WAREHOUSE_SIZE, 4 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'Large' AS WAREHOUSE_SIZE, 8 AS CREDITS_PER_HOUR UNION ALL
        SELECT 'X-Large' AS WAREHOUSE_SIZE, 16 AS CREDITS_PER_HOUR UNION ALL
        SELECT '2X-Large' AS WAREHOUSE_SIZE, 32 AS CREDITS_PER_HOUR UNION ALL
        SELECT '3X-Large' AS WAREHOUSE_SIZE, 64 AS CREDITS_PER_HOUR UNION ALL
        SELECT '4X-Large' AS WAREHOUSE_SIZE, 128 AS CREDITS_PER_HOUR
      ) 
      ,QUERY AS (
      SELECT CURRENT_ACCOUNT() AS ACCOUNT,
        'TASKS' AS METRICNAME,
        DATE(START_TIME) TIMESTAMP ,
        ROLE_NAME ||' '|| WAREHOUSE_NAME AS DESCRIPTION,
        NULL AS QUERYID, 
        SUM(INBOUND_DATA_TRANSFER_BYTES) DATATRANSFER,
        SUM(EXECUTION_TIME/(1000*60*60)*WH.CREDITS_PER_HOUR*2) COMPUTECOST
      FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY QH
      INNER JOIN WAREHOUSE_SIZES WH
          ON QH.WAREHOUSE_SIZE=WH.WAREHOUSE_SIZE
      WHERE USER_NAME = 'SYSTEM'
      GROUP BY 1,2,3,4)
      SELECT ACCOUNT,
        METRICNAME, 
        TIMESTAMP,
        DESCRIPTION,
        QUERYID,
        DATATRANSFER,
        NULL TOTALCOST,
        COMPUTECOST,
        NULL STORAGECOST,
        NULL LONGRUNNINGQUERY ,
        NULL TOPWAREHOUSE ,
        NULL TOPUSER ,
        NULL TOPROLE ,
        NULL QUERYTIMEOUT ,
        COMPUTECOST TASKCREDITS ,
        NULL WAREHOUSEPROVISION ,
        NULL QUERYQUEUEING ,
        NULL WAREHOUSEREPAIR ,
        NULL SERVICEACCOUNT ,
        NULL ADMINLOGIN ,
        NULL UNUSEDROLE ,
        NULL NOTALLOWEDUSER 
      FROM QUERY QH
      WHERE DESCRIPTION IS NOT NULL 
          AND COMPUTECOST >= 285
          AND DATEDIFF(DAY, TIMESTAMP,CURRENT_DATE()) = 1
          AND NOT EXISTS (
            SELECT QUERYID
            FROM `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS OB
            WHERE QH.ACCOUNT = OB.ACCOUNT 
              AND QH.METRICNAME = OB.METRICNAME
              AND QH.TIMESTAMP = OB.TIMESTAMP)
              );
    
      --Warehouse provisiong query
      INSERT INTO `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS (
      WITH QUERY AS (
        SELECT CURRENT_ACCOUNT() AS ACCOUNT,
            'WAREHOUSE_LONG_PROVISIONING' AS METRICNAME,
            'WAREHOUSE NAME: ' || WAREHOUSE_NAME || ' QUEUED PROVISIONING TIME: ' || QUEUED_PROVISIONING_TIME/60000 AS DESCRIPTION,            
            WAREHOUSE_NAME,
            START_TIME AS TIMESTAMP,
            QUERY_ID AS QUERYID,
            NULL AS DATATRANSFER,
            NULL AS COMPUTECOST
        FROM TABLE(SNOWFLAKE.INFORMATION_SCHEMA.QUERY_HISTORY(END_TIME_RANGE_START=>DATEADD(MINUTES, -5, CURRENT_TIMESTAMP()))) 
        WHERE QUEUED_PROVISIONING_TIME/60000 >=3)
        SELECT ACCOUNT,
          METRICNAME, 
          TIMESTAMP,
          DESCRIPTION,
          QUERYID,
          DATATRANSFER,
          NULL TOTALCOST,
          COMPUTECOST,
          NULL STORAGECOST,
          NULL LONGRUNNINGQUERY ,
          NULL TOPWAREHOUSE ,
          NULL TOPUSER ,
          NULL TOPROLE ,
          NULL QUERYTIMEOUT ,
          NULL TASKCREDITS ,
          WAREHOUSE_NAME WAREHOUSEPROVISION ,
          NULL QUERYQUEUEING ,
          NULL WAREHOUSEREPAIR ,
          NULL SERVICEACCOUNT ,
          NULL ADMINLOGIN ,
          NULL UNUSEDROLE ,
          NULL NOTALLOWEDUSER 
        FROM QUERY QH
        WHERE NOT EXISTS (
      SELECT QUERYID 
      FROM `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS OB
      WHERE QH.ACCOUNT = OB.ACCOUNT 
        AND QH.METRICNAME = OB.METRICNAME
        AND QH.TIMESTAMP = OB.TIMESTAMP)
      );

      --Query Queueing time
      INSERT INTO `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS (
      WITH QUERY AS (
        SELECT CURRENT_ACCOUNT() AS ACCOUNT,
            'QUERY_QUEUEING_TIME' AS METRICNAME,
            'WAREHOUSE NAME: ' || WAREHOUSE_NAME ||'WAREHOUSE SIZE: '|| WAREHOUSE_SIZE || ' QUEUED OVERLOAD TIME: ' || QUEUED_OVERLOAD_TIME/60000 AS DESCRIPTION,
            START_TIME AS TIMESTAMP,
            QUERY_ID AS QUERYID,
            NULL AS DATATRANSFER,
            NULL AS COMPUTECOST
        FROM TABLE(SNOWFLAKE.INFORMATION_SCHEMA.QUERY_HISTORY(END_TIME_RANGE_START=>DATEADD(MINUTES, -5, CURRENT_TIMESTAMP()))) 
        WHERE QUEUED_OVERLOAD_TIME/60000 >=3)
        SELECT ACCOUNT,
          METRICNAME, 
          TIMESTAMP,
          DESCRIPTION,
          QUERYID,
          DATATRANSFER,
          NULL TOTALCOST,
          COMPUTECOST,
          NULL STORAGECOST,
          NULL LONGRUNNINGQUERY ,
          NULL TOPWAREHOUSE ,
          NULL TOPUSER ,
          NULL TOPROLE ,
          NULL QUERYTIMEOUT ,
          NULL TASKCREDITS ,
          NULL WAREHOUSEPROVISION ,
          QUERYID QUERYQUEUEING ,
          NULL WAREHOUSEREPAIR ,
          NULL SERVICEACCOUNT ,
          NULL ADMINLOGIN ,
          NULL UNUSEDROLE ,
          NULL NOTALLOWEDUSER 
        FROM QUERY QH
        WHERE NOT EXISTS (
      SELECT QUERYID
      FROM `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS OB
      WHERE QH.ACCOUNT = OB.ACCOUNT 
        AND QH.METRICNAME = OB.METRICNAME
        AND QH.TIMESTAMP = OB.TIMESTAMP)
      );

      --warehouse repair time
      INSERT INTO `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS (
        WITH QUERY AS (
        SELECT CURRENT_ACCOUNT() AS ACCOUNT,
            'QUERY_QUEUEING_TIME' AS METRICNAME,
            'WAREHOUSE NAME: ' || WAREHOUSE_NAME ||'WAREHOUSE SIZE: '|| WAREHOUSE_SIZE || ' QUEUED REPAIR TIME: ' || QUEUED_REPAIR_TIME/60000 AS DESCRIPTION,
            WAREHOUSE_NAME,
            START_TIME AS TIMESTAMP,
            QUERY_ID AS QUERYID,
            NULL AS DATATRANSFER,
            NULL AS COMPUTECOST
        FROM TABLE(SNOWFLAKE.INFORMATION_SCHEMA.QUERY_HISTORY(END_TIME_RANGE_START=>DATEADD(MINUTES, -5, CURRENT_TIMESTAMP()))) 
        WHERE QUEUED_REPAIR_TIME/60000 >=3)
        SELECT ACCOUNT,
          METRICNAME, 
          TIMESTAMP,
          DESCRIPTION,
          QUERYID,
          DATATRANSFER,
          NULL TOTALCOST,
          COMPUTECOST,
          NULL STORAGECOST,
          NULL LONGRUNNINGQUERY ,
          NULL TOPWAREHOUSE ,
          NULL TOPUSER ,
          NULL TOPROLE ,
          NULL QUERYTIMEOUT ,
          NULL TASKCREDITS ,
          NULL WAREHOUSEPROVISION ,
          NULL QUERYQUEUEING ,
          WAREHOUSE_NAME WAREHOUSEREPAIR ,
          NULL SERVICEACCOUNT ,
          NULL ADMINLOGIN ,
          NULL UNUSEDROLE ,
          NULL NOTALLOWEDUSER 
        FROM QUERY QH
        WHERE NOT EXISTS (
        SELECT QUERYID
        FROM `+ db_name + `.OBSERVABILITY_CORE.OBSERVABILITY_METRICS OB
        WHERE QH.ACCOUNT = OB.ACCOUNT 
          AND QH.METRICNAME = OB.METRICNAME
          AND QH.TIMESTAMP = OB.TIMESTAMP)
      );
      RETURN 'SUCCESS';
      END;`

    var statement2 = snowflake.createStatement({sqlText: query});
    var result = statement2.execute()
    result.next()
    return result.getColumnValue(1)
    $$;