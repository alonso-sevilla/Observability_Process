CALL OBSERVABILITY_SETUP.setup_procedures_v1.FEDERATED_COST_ALERT_CREATION('alonso.sevilla@wahlclipper.com', 'IE93671');
CREATE OR REPLACE PROCEDURE OBSERVABILITY_SETUP.setup_procedures_v1.FEDERATED_COST_ALERT_CREATION(INFRA_EMAIL VARCHAR, ACCOUNT VARCHAR)
      RETURNS STRING
      LANGUAGE JAVASCRIPT
      EXECUTE AS CALLER
    AS
    $$

    var costing_db_name = ACCOUNT + "_KH_SNOWFLAKE_COSTING";
    
    
    var infra_email = INFRA_EMAIL;
    var account =  ACCOUNT;

    var thirty_day_cost_alert = `
      BEGIN
      USE DATABASE ${costing_db_name};
      USE ROLE OBSERVABILITY_ADMIN;
      USE WAREHOUSE OBSERVABILITY_WH;
      USE SCHEMA SNOWFLAKE_COST_STD;

      CREATE OR REPLACE ALERT THIRTY_DAY_TOTAL_COST_ALERT
        WAREHOUSE = OBSERVABILITY_WH
        SCHEDULE = 'USING CRON 0 17 * * * UTC'
        IF (EXISTS (
          WITH THIRTY_DAY_COMPUTE_BENCHMARK AS (
            SELECT SUM((NVL(C.ALLOCATED_CREDITS_USED, 0) + NVL(C.ALLOCATED_CREDITS_USED_CLOUD_SERVICES, 0))*2)/30 AS TOTAL_COMPUTE_COST_DAYS
            FROM ${costing_db_name}.SNOWFLAKE_COST_STD.SF_CREDITS_BY_QUERY_NEW C 
            WHERE DAYOFYEAR(C.START_TIME) > (SELECT IFF(DAYOFYEAR(DATEADD("DAY",-1,CURRENT_DATE())) = 0, 365, DAYOFYEAR(DATEADD("DAY",-30,CURRENT_DATE())))) 
            AND YEAR(C.START_TIME) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE())))
            ),
          THIRTY_DAY_STORAGE_BENCHMARK AS (
            SELECT (MAX(NVL(A.DATABASE_STORAGE_PETABYTES, 0)*1000) + MAX(NVL(A.FAILSAFE_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(A.HYBRID_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(B.AVERAGE_STAGE_BYTES, 0) * 0.000000000001))*23/30 AS TOTAL_STORAGE_COST_DAYS
            FROM ${costing_db_name}.SNOWFLAKE_COST_STD.DB_STORAGE_CALC A 
            RIGHT JOIN ${costing_db_name}.SNOWFLAKE_COST_STD.DAILY_STAGE_STORAGE B ON A.USAGE_DATE = B.USAGE_DATE
            WHERE DAYOFYEAR(B.USAGE_DATE) > (SELECT IFF(DAYOFYEAR(DATEADD("DAY",-1,CURRENT_DATE())) = 0, 365, DAYOFYEAR(DATEADD("DAY",-30,CURRENT_DATE()))))  
            AND YEAR(B.USAGE_DATE) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
            ),
          TODAY_COMPUTE_BENCHMARK AS (
            SELECT SUM((NVL(C.ALLOCATED_CREDITS_USED, 0) + NVL(C.ALLOCATED_CREDITS_USED_CLOUD_SERVICES, 0))*2) AS TOTAL_COMPUTE_COST_DAY
            FROM ${costing_db_name}.SNOWFLAKE_COST_STD.SF_CREDITS_BY_QUERY_NEW C 
            WHERE DAYOFYEAR(C.START_TIME) = DAYOFYEAR(CURRENT_DATE()) 
            AND YEAR(C.START_TIME) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
            ),
          TODAY_STORAGE_BENCHMARK AS (
            SELECT (MAX(NVL(A.DATABASE_STORAGE_PETABYTES, 0)*1000) + MAX(NVL(A.FAILSAFE_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(A.HYBRID_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(B.AVERAGE_STAGE_BYTES, 0) * 0.000000000001))*23 AS TOTAL_STORAGE_COST_DAY
            FROM ${costing_db_name}.SNOWFLAKE_COST_STD.DB_STORAGE_CALC A 
            RIGHT JOIN ${costing_db_name}.SNOWFLAKE_COST_STD.DAILY_STAGE_STORAGE B ON A.USAGE_DATE = B.USAGE_DATE
            WHERE DAYOFYEAR(B.USAGE_DATE) = DAYOFYEAR(CURRENT_DATE())   
            AND YEAR(B.USAGE_DATE) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
            )
            SELECT NVL(SUM(TOTAL_COMPUTE_COST_DAY), 0) + NVL(SUM(TOTAL_STORAGE_COST_DAY), 0) AS CURRENT_COST, SUM(TOTAL_COMPUTE_COST_DAYS) + SUM(TOTAL_STORAGE_COST_DAYS) AS HISTORICAL_COST
            FROM THIRTY_DAY_COMPUTE_BENCHMARK, THIRTY_DAY_STORAGE_BENCHMARK, TODAY_COMPUTE_BENCHMARK, TODAY_STORAGE_BENCHMARK
            HAVING CURRENT_COST > HISTORICAL_COST
          ))
          THEN BEGIN
              CALL SYSTEM$SEND_EMAIL('slack_alert', '` + infra_email + `', 'Thirty Day average total Cost Alert', 'The total cost for the federated account has exceeded the thirty day historical average');
              INSERT INTO OBSERVABILITY.OBSERVABILITY_CORE.OBSERVABILITY_METRICS (ACCOUNT, METRICNAME, TIMESTAMP, TOTALCOST)
                WITH TODAY_COMPUTE_BENCHMARK AS (
                  SELECT SUM((NVL(C.ALLOCATED_CREDITS_USED, 0) + NVL(C.ALLOCATED_CREDITS_USED_CLOUD_SERVICES, 0))*2) AS TOTAL_COMPUTE_COST_DAY
                  FROM ${costing_db_name}.SNOWFLAKE_COST_STD.SF_CREDITS_BY_QUERY_NEW C 
                  WHERE DAYOFYEAR(C.START_TIME) = DAYOFYEAR(CURRENT_DATE()) 
                  AND YEAR(C.START_TIME) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
                  ),
                TODAY_STORAGE_BENCHMARK AS (
                  SELECT (MAX(NVL(A.DATABASE_STORAGE_PETABYTES, 0)*1000) + MAX(NVL(A.FAILSAFE_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(A.HYBRID_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(B.AVERAGE_STAGE_BYTES, 0) * 0.000000000001))*23 AS TOTAL_STORAGE_COST_DAY
                  FROM ${costing_db_name}.SNOWFLAKE_COST_STD.DB_STORAGE_CALC A 
                  RIGHT JOIN ${costing_db_name}.SNOWFLAKE_COST_STD.DAILY_STAGE_STORAGE B ON A.USAGE_DATE = B.USAGE_DATE
                  WHERE DAYOFYEAR(B.USAGE_DATE) = DAYOFYEAR(CURRENT_DATE())   
                  AND YEAR(B.USAGE_DATE) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
                  )
                  SELECT '` + account + `', 'Thirty Day Total Cost Alert', CURRENT_TIMESTAMP(), NVL(SUM(TOTAL_COMPUTE_COST_DAY), 0) + NVL(SUM(TOTAL_STORAGE_COST_DAY), 0) AS CURRENT_COST
                  FROM TODAY_COMPUTE_BENCHMARK, TODAY_STORAGE_BENCHMARK;
              END;
    
      ALTER ALERT THIRTY_DAY_TOTAL_COST_ALERT RESUME;

      CREATE OR REPLACE ALERT THIRTY_DAY_COMPUTE_COST_ALERT 
        WAREHOUSE = OBSERVABILITY_WH
        SCHEDULE = 'USING CRON 0 17 * * * UTC'
        IF (EXISTS (
          WITH THIRTY_DAY_COMPUTE_BENCHMARK AS (
          SELECT SUM((NVL(C.ALLOCATED_CREDITS_USED, 0) + NVL(C.ALLOCATED_CREDITS_USED_CLOUD_SERVICES, 0))*2)/30 AS TOTAL_COMPUTE_COST_DAYS
          FROM ${costing_db_name}.SNOWFLAKE_COST_STD.SF_CREDITS_BY_QUERY_NEW C 
          WHERE DAYOFYEAR(C.START_TIME) > (SELECT IFF(DAYOFYEAR(DATEADD("DAY",-1,CURRENT_DATE())) = 0, 365, DAYOFYEAR(DATEADD("DAY",-30,CURRENT_DATE())))) 
          AND YEAR(C.START_TIME) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
          ),
          TODAY_COMPUTE_BENCHMARK AS (
          SELECT SUM((NVL(C.ALLOCATED_CREDITS_USED, 0) + NVL(C.ALLOCATED_CREDITS_USED_CLOUD_SERVICES, 0))*2) AS TOTAL_COMPUTE_COST_DAY
          FROM ${costing_db_name}.SNOWFLAKE_COST_STD.SF_CREDITS_BY_QUERY_NEW C 
          WHERE DAYOFYEAR(C.START_TIME) = DAYOFYEAR(CURRENT_DATE()) 
          AND YEAR(C.START_TIME) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
          )
          SELECT NVL(SUM(TOTAL_COMPUTE_COST_DAY), 0) AS CURRENT_COST, SUM(TOTAL_COMPUTE_COST_DAYS) AS HISTORICAL_COST
          FROM THIRTY_DAY_COMPUTE_BENCHMARK, TODAY_COMPUTE_BENCHMARK
          HAVING CURRENT_COST > HISTORICAL_COST
        ))

        THEN BEGIN
            CALL SYSTEM$SEND_EMAIL('slack_alert', '` + infra_email + `', 'Thirty Day average compute Cost Alert', 'The total compute cost for the federated account has exceeded the thirty day historical average');
            INSERT INTO OBSERVABILITY.OBSERVABILITY_CORE.OBSERVABILITY_METRICS (ACCOUNT, METRICNAME, TIMESTAMP, COMPUTECOST)
              WITH TODAY_COMPUTE_BENCHMARK AS (
                  SELECT SUM((NVL(C.ALLOCATED_CREDITS_USED, 0) + NVL(C.ALLOCATED_CREDITS_USED_CLOUD_SERVICES, 0))*2) AS TOTAL_COMPUTE_COST_DAY
                  FROM ${costing_db_name}.SNOWFLAKE_COST_STD.SF_CREDITS_BY_QUERY_NEW C 
                  WHERE DAYOFYEAR(C.START_TIME) = DAYOFYEAR(CURRENT_DATE()) 
                  AND YEAR(C.START_TIME) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
                  )
                SELECT '` + account + `', 'Thirty Day Total Compute Cost Alert', CURRENT_TIMESTAMP(), NVL(SUM(TOTAL_COMPUTE_COST_DAY), 0) AS CURRENT_COST
                FROM TODAY_COMPUTE_BENCHMARK;
            END;
  
      ALTER ALERT THIRTY_DAY_COMPUTE_COST_ALERT RESUME;

      CREATE or replace ALERT thirty_day_storage_cost_alert
        WAREHOUSE = OBSERVABILITY_WH
        SCHEDULE = 'USING CRON 0 17 * * * UTC'
        IF (EXISTS (
          WITH THIRTY_DAY_STORAGE_BENCHMARK AS (
            SELECT (MAX(NVL(A.DATABASE_STORAGE_PETABYTES, 0)*1000) + MAX(NVL(A.FAILSAFE_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(A.HYBRID_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(B.AVERAGE_STAGE_BYTES, 0) * 0.000000000001))*23/30 AS TOTAL_STORAGE_COST_DAYS
            FROM ${costing_db_name}.SNOWFLAKE_COST_STD.DB_STORAGE_CALC A 
            RIGHT JOIN ${costing_db_name}.SNOWFLAKE_COST_STD.DAILY_STAGE_STORAGE B ON A.USAGE_DATE = B.USAGE_DATE
            WHERE DAYOFYEAR(B.USAGE_DATE) > (SELECT IFF(DAYOFYEAR(DATEADD("DAY",-1,CURRENT_DATE())) = 0, 365, DAYOFYEAR(DATEADD("DAY",-30,CURRENT_DATE()))))  
            AND YEAR(B.USAGE_DATE) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
          ),
          TODAY_STORAGE_BENCHMARK AS (
            SELECT (MAX(NVL(A.DATABASE_STORAGE_PETABYTES, 0)*1000) + MAX(NVL(A.FAILSAFE_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(A.HYBRID_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(B.AVERAGE_STAGE_BYTES, 0) * 0.000000000001))*23 AS TOTAL_STORAGE_COST_DAY
            FROM ${costing_db_name}.SNOWFLAKE_COST_STD.DB_STORAGE_CALC A 
            RIGHT JOIN ${costing_db_name}.SNOWFLAKE_COST_STD.DAILY_STAGE_STORAGE B ON A.USAGE_DATE = B.USAGE_DATE
            WHERE DAYOFYEAR(B.USAGE_DATE) = DAYOFYEAR(CURRENT_DATE())   
            AND YEAR(B.USAGE_DATE) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
            )
          SELECT NVL(SUM(TOTAL_STORAGE_COST_DAY), 0) AS CURRENT_COST, SUM(TOTAL_STORAGE_COST_DAYS) AS HISTORICAL_COST
          FROM THIRTY_DAY_STORAGE_BENCHMARK, TODAY_STORAGE_BENCHMARK
          HAVING CURRENT_COST > HISTORICAL_COST
        ))
        THEN BEGIN
            CALL SYSTEM$SEND_EMAIL('slack_alert', 'alonso_sevilla@hakkoda.io', 'Thirty Day average storage Cost Alert', 'The total storage cost for the federated account has exceeded the thirty day historical average');
            INSERT INTO OBSERVABILITY.OBSERVABILITY_CORE.OBSERVABILITY_METRICS (ACCOUNT, METRICNAME, TIMESTAMP, STORAGECOST)
              WITH TODAY_STORAGE_BENCHMARK AS (
                SELECT (MAX(NVL(A.DATABASE_STORAGE_PETABYTES, 0)*1000) + MAX(NVL(A.FAILSAFE_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(A.HYBRID_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(B.AVERAGE_STAGE_BYTES, 0) * 0.000000000001))*23 AS TOTAL_STORAGE_COST_DAY
                FROM KH_SNOWFLAKE_COSTING.SNOWFLAKE_COST_STD.DB_STORAGE_CALC A 
                RIGHT JOIN KH_SNOWFLAKE_COSTING.SNOWFLAKE_COST_STD.DAILY_STAGE_STORAGE B ON A.USAGE_DATE = B.USAGE_DATE
                WHERE DAYOFYEAR(B.USAGE_DATE) = DAYOFYEAR(CURRENT_DATE())   
                AND YEAR(B.USAGE_DATE) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
                )
                SELECT '` + account + `', 'Thirty Day Total Cost Alert', CURRENT_TIMESTAMP(), NVL(SUM(TOTAL_STORAGE_COST_DAY), 0) AS CURRENT_COST
                FROM TODAY_STORAGE_BENCHMARK;
            END;  
      ALTER ALERT THIRTY_DAY_STORAGE_COST_ALERT RESUME;
      INSERT INTO OBSERVABILITY_MAINTENANCE.LOGGING_SCHEMA.LOGGING_TABLE
      VALUES ('FEDERATED_COST_ALERT_CREATION','SUCCESS', CURRENT_TIMESTAMP(),'`+account+`');

      RETURN 'SUCCESSFULLY CREATED ALERT AND INTEGRATION'; 
      EXCEPTION
      WHEN statement_error THEN 
        LET ERROR_MESSAGE := CURRENT_TIMESTAMP()||SQLCODE || ': '||SQLERRM;
          INSERT INTO OBSERVABILITY_MAINTENANCE.LOGGING_SCHEMA.LOGGING_TABLE
          VALUES('FEDERATED_COST_ALERT_CREATION','FAILED', CURRENT_TIMESTAMP() || :ERROR_MESSAGE,'`+account+`' );
          USE ROLE ACCOUNTADMIN;
          USE WAREHOUSE COMPUTE_WH;
          RETURN OBJECT_CONSTRUCT('ERROR TYPE','STATEMENT_ERROR',
                          'SQLCODE', sqlcode,
                          'SQLERRM' , sqlerrm,
                          'SQLSTATE', sqlstate);
      
        END`;
      var thirty_day_cost_alert_creation = snowflake.createStatement({sqlText: thirty_day_cost_alert});
      var result = thirty_day_cost_alert_creation.execute();

      var four_week_cost_alert = `
        BEGIN
        USE DATABASE ${costing_db_name};
        USE ROLE OBSERVABILITY_ADMIN;
        USE WAREHOUSE OBSERVABILITY_WH;
        USE SCHEMA SNOWFLAKE_COST_STD;

        CREATE or replace ALERT four_week_total_cost_alert
          WAREHOUSE = OBSERVABILITY_WH
          SCHEDULE = 'USING CRON 0 17 * * * UTC'
          IF (EXISTS (
            WITH FOUR_WEEK_COMPUTE_BENCHMARK AS (
              SELECT SUM((NVL(C.ALLOCATED_CREDITS_USED, 0) + NVL(C.ALLOCATED_CREDITS_USED_CLOUD_SERVICES, 0))*2)/4 AS TOTAL_COMPUTE_COST_WEEKS
              FROM ${costing_db_name}.SNOWFLAKE_COST_STD.SF_CREDITS_BY_QUERY_NEW C 
              WHERE WEEKOFYEAR(C.START_TIME) > (SELECT IFF(WEEKOFYEAR(DATEADD("WEEK",-1,CURRENT_DATE())) = 0, 52, WEEKOFYEAR(DATEADD("WEEK",-4,CURRENT_DATE())))) 
              AND YEAR(C.START_TIME) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
            ),
            FOUR_WEEK_STORAGE_BENCHMARK AS (
              SELECT (MAX(NVL(A.DATABASE_STORAGE_PETABYTES, 0)*1000) + MAX(NVL(A.FAILSAFE_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(A.HYBRID_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(B.AVERAGE_STAGE_BYTES, 0) * 0.000000000001))*23/4 AS TOTAL_STORAGE_COST_WEEKS
              FROM ${costing_db_name}.SNOWFLAKE_COST_STD.DB_STORAGE_CALC A 
              RIGHT JOIN ${costing_db_name}.SNOWFLAKE_COST_STD.DAILY_STAGE_STORAGE B ON A.USAGE_DATE = B.USAGE_DATE
              WHERE WEEKOFYEAR(A.USAGE_DATE) > (SELECT IFF(WEEKOFYEAR(DATEADD("WEEK",-1,CURRENT_DATE())) = 0, 52, WEEKOFYEAR(DATEADD("WEEK",-4,CURRENT_DATE())))) 
              AND YEAR(B.USAGE_DATE) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
            ),
            TODAY_COMPUTE_BENCHMARK AS (
              SELECT SUM((NVL(C.ALLOCATED_CREDITS_USED, 0) + NVL(C.ALLOCATED_CREDITS_USED_CLOUD_SERVICES, 0))*2) AS TOTAL_COMPUTE_COST_WEEK
              FROM ${costing_db_name}.SNOWFLAKE_COST_STD.SF_CREDITS_BY_QUERY_NEW C 
              WHERE WEEKOFYEAR(C.START_TIME) = WEEKOFYEAR(CURRENT_DATE()) 
              AND YEAR(C.START_TIME) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
            ),
            TODAY_STORAGE_BENCHMARK AS (
              SELECT (MAX(NVL(A.DATABASE_STORAGE_PETABYTES, 0)*1000) + MAX(NVL(A.FAILSAFE_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(A.HYBRID_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(B.AVERAGE_STAGE_BYTES, 0) * 0.000000000001))*23 AS TOTAL_STORAGE_COST_WEEK
              FROM ${costing_db_name}.SNOWFLAKE_COST_STD.DB_STORAGE_CALC A 
              RIGHT JOIN ${costing_db_name}.SNOWFLAKE_COST_STD.DAILY_STAGE_STORAGE B ON A.USAGE_DATE = B.USAGE_DATE
              WHERE WEEKOFYEAR(B.USAGE_DATE) = WEEKOFYEAR(CURRENT_DATE())   
              AND YEAR(B.USAGE_DATE) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
            )
            SELECT NVL(SUM(TOTAL_COMPUTE_COST_WEEK), 0) + NVL(SUM(TOTAL_STORAGE_COST_WEEK), 0) AS CURRENT_COST, SUM(TOTAL_COMPUTE_COST_WEEKS) + SUM(TOTAL_STORAGE_COST_WEEKS) AS HISTORICAL_COST
            FROM FOUR_WEEK_COMPUTE_BENCHMARK, FOUR_WEEK_STORAGE_BENCHMARK, TODAY_COMPUTE_BENCHMARK, TODAY_STORAGE_BENCHMARK
            HAVING CURRENT_COST > HISTORICAL_COST
          ))
          THEN BEGIN
              CALL SYSTEM$SEND_EMAIL('slack_alert', '` + infra_email + `', 'four week average Cost Alert', 'The total cost for the federated account has exceeded the four week historical average');
              INSERT INTO OBSERVABILITY.OBSERVABILITY_CORE.OBSERVABILITY_METRICS (ACCOUNT, METRICNAME, TIMESTAMP, TOTALCOST)
                  WITH TODAY_COMPUTE_BENCHMARK AS (
                    SELECT SUM((NVL(C.ALLOCATED_CREDITS_USED, 0) + NVL(C.ALLOCATED_CREDITS_USED_CLOUD_SERVICES, 0))*2) AS TOTAL_COMPUTE_COST_WEEK
                    FROM ${costing_db_name}.SNOWFLAKE_COST_STD.SF_CREDITS_BY_QUERY_NEW C 
                    WHERE WEEKOFYEAR(C.START_TIME) = WEEKOFYEAR(CURRENT_DATE()) 
                    AND YEAR(C.START_TIME) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
                  ),
                  TODAY_STORAGE_BENCHMARK AS (
                    SELECT (MAX(NVL(A.DATABASE_STORAGE_PETABYTES, 0)*1000) + MAX(NVL(A.FAILSAFE_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(A.HYBRID_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(B.AVERAGE_STAGE_BYTES, 0) * 0.000000000001))*23 AS TOTAL_STORAGE_COST_WEEK
                    FROM ${costing_db_name}.SNOWFLAKE_COST_STD.DB_STORAGE_CALC A 
                    RIGHT JOIN ${costing_db_name}.SNOWFLAKE_COST_STD.DAILY_STAGE_STORAGE B ON A.USAGE_DATE = B.USAGE_DATE
                    WHERE WEEKOFYEAR(B.USAGE_DATE) = WEEKOFYEAR(CURRENT_DATE())   
                    AND YEAR(B.USAGE_DATE) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
                  )
                  SELECT '` + account + `', 'Four Week Total Cost Alert', CURRENT_TIMESTAMP(), NVL(SUM(TOTAL_COMPUTE_COST_WEEK), 0) + NVL(SUM(TOTAL_STORAGE_COST_WEEK), 0) AS CURRENT_COST
                  FROM TODAY_COMPUTE_BENCHMARK, TODAY_STORAGE_BENCHMARK;
              END;
    
        ALTER ALERT FOUR_WEEK_TOTAL_COST_ALERT RESUME;

        CREATE OR REPLACE ALERT FOUR_WEEK_COMPUTE_COST_ALERT
          WAREHOUSE = OBSERVABILITY_WH
          SCHEDULE = 'USING CRON 0 17 * * * UTC'
          IF (EXISTS (
            WITH FOUR_WEEK_COMPUTE_BENCHMARK AS (
              SELECT SUM((NVL(C.ALLOCATED_CREDITS_USED, 0) + NVL(C.ALLOCATED_CREDITS_USED_CLOUD_SERVICES, 0))*2)/4 AS TOTAL_COMPUTE_COST_WEEKS
              FROM ${costing_db_name}.SNOWFLAKE_COST_STD.SF_CREDITS_BY_QUERY_NEW C 
              WHERE WEEKOFYEAR(C.START_TIME) > (SELECT IFF(WEEKOFYEAR(DATEADD("WEEK",-1,CURRENT_DATE())) = 0, 52, WEEKOFYEAR(DATEADD("WEEK",-4,CURRENT_DATE())))) 
              AND YEAR(C.START_TIME) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
            ),
            TODAY_COMPUTE_BENCHMARK AS (
              SELECT SUM((NVL(C.ALLOCATED_CREDITS_USED, 0) + NVL(C.ALLOCATED_CREDITS_USED_CLOUD_SERVICES, 0))*2) AS TOTAL_COMPUTE_COST_WEEK
              FROM ${costing_db_name}.SNOWFLAKE_COST_STD.SF_CREDITS_BY_QUERY_NEW C 
              WHERE WEEKOFYEAR(C.START_TIME) = WEEKOFYEAR(CURRENT_DATE()) 
              AND YEAR(C.START_TIME) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
            )
            SELECT NVL(SUM(TOTAL_COMPUTE_COST_WEEK), 0) AS CURRENT_COST, SUM(TOTAL_COMPUTE_COST_WEEKS) AS HISTORICAL_COST
            FROM FOUR_WEEK_COMPUTE_BENCHMARK, TODAY_COMPUTE_BENCHMARK 
            HAVING CURRENT_COST > HISTORICAL_COST
          ))
          THEN BEGIN
              CALL SYSTEM$SEND_EMAIL('slack_alert', '` + infra_email + `', 'four week average compute Cost Alert', 'The total compute cost for the federated account has exceeded the four week historical average');
              INSERT INTO OBSERVABILITY.OBSERVABILITY_CORE.OBSERVABILITY_METRICS (ACCOUNT, METRICNAME, TIMESTAMP, COMPUTECOST)
                  WITH TODAY_COMPUTE_BENCHMARK AS (
                    SELECT SUM((NVL(C.ALLOCATED_CREDITS_USED, 0) + NVL(C.ALLOCATED_CREDITS_USED_CLOUD_SERVICES, 0))*2) AS TOTAL_COMPUTE_COST_WEEK
                    FROM ${costing_db_name}.SNOWFLAKE_COST_STD.SF_CREDITS_BY_QUERY_NEW C 
                    WHERE WEEKOFYEAR(C.START_TIME) = WEEKOFYEAR(CURRENT_DATE()) 
                    AND YEAR(C.START_TIME) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
                  )
                  SELECT '` + account + `', 'Four Week Total Compute Cost Alert', CURRENT_TIMESTAMP(), NVL(SUM(TOTAL_COMPUTE_COST_WEEK), 0) AS CURRENT_COST
                  FROM TODAY_COMPUTE_BENCHMARK;
              END;      
        ALTER ALERT FOUR_WEEK_COMPUTE_COST_ALERT RESUME;

        CREATE OR REPLACE ALERT FOUR_WEEK_STORAGE_COST_ALERT
          WAREHOUSE = OBSERVABILITY_WH
          SCHEDULE = 'USING CRON 0 17 * * * UTC'
          IF (EXISTS (
            WITH FOUR_WEEK_STORAGE_BENCHMARK AS (
              SELECT (MAX(NVL(A.DATABASE_STORAGE_PETABYTES, 0)*1000) + MAX(NVL(A.FAILSAFE_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(A.HYBRID_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(B.AVERAGE_STAGE_BYTES, 0) * 0.000000000001))*23/4 AS TOTAL_STORAGE_COST_WEEKS
              FROM ${costing_db_name}.SNOWFLAKE_COST_STD.DB_STORAGE_CALC A 
              RIGHT JOIN ${costing_db_name}.SNOWFLAKE_COST_STD.DAILY_STAGE_STORAGE B ON A.USAGE_DATE = B.USAGE_DATE
              WHERE WEEKOFYEAR(A.USAGE_DATE) > (SELECT IFF(WEEKOFYEAR(DATEADD("WEEK",-1,CURRENT_DATE())) = 0, 52, WEEKOFYEAR(DATEADD("WEEK",-4,CURRENT_DATE())))) 
              AND YEAR(B.USAGE_DATE) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
            ),
            TODAY_STORAGE_BENCHMARK AS (
              SELECT (MAX(NVL(A.DATABASE_STORAGE_PETABYTES, 0)*1000) + MAX(NVL(A.FAILSAFE_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(A.HYBRID_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(B.AVERAGE_STAGE_BYTES, 0) * 0.000000000001))*23 AS TOTAL_STORAGE_COST_WEEK
              FROM ${costing_db_name}.SNOWFLAKE_COST_STD.DB_STORAGE_CALC A 
              RIGHT JOIN ${costing_db_name}.SNOWFLAKE_COST_STD.DAILY_STAGE_STORAGE B ON A.USAGE_DATE = B.USAGE_DATE
              WHERE WEEKOFYEAR(B.USAGE_DATE) = WEEKOFYEAR(CURRENT_DATE())   
              AND YEAR(B.USAGE_DATE) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
            )
            SELECT NVL(SUM(TOTAL_STORAGE_COST_WEEK), 0) AS CURRENT_COST, SUM(TOTAL_STORAGE_COST_WEEKS) AS HISTORICAL_COST
            FROM FOUR_WEEK_STORAGE_BENCHMARK, TODAY_STORAGE_BENCHMARK
            HAVING CURRENT_COST > HISTORICAL_COST
          ))
          THEN BEGIN
              CALL SYSTEM$SEND_EMAIL('slack_alert', '` + infra_email + `', 'four week average Storage Cost Alert', 'The total Storage cost for the federated account has exceeded the four week historical average');
              INSERT INTO OBSERVABILITY.OBSERVABILITY_CORE.OBSERVABILITY_METRICS (ACCOUNT, METRICNAME, TIMESTAMP, STORAGECOST)
                  WITH TODAY_STORAGE_BENCHMARK AS (
                    SELECT (MAX(NVL(A.DATABASE_STORAGE_PETABYTES, 0)*1000) + MAX(NVL(A.FAILSAFE_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(A.HYBRID_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(B.AVERAGE_STAGE_BYTES, 0) * 0.000000000001))*23 AS TOTAL_STORAGE_COST_WEEK
                    FROM ${costing_db_name}.SNOWFLAKE_COST_STD.DB_STORAGE_CALC A 
                    RIGHT JOIN ${costing_db_name}.SNOWFLAKE_COST_STD.DAILY_STAGE_STORAGE B ON A.USAGE_DATE = B.USAGE_DATE
                    WHERE WEEKOFYEAR(B.USAGE_DATE) = WEEKOFYEAR(CURRENT_DATE())   
                    AND YEAR(B.USAGE_DATE) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
                  )
                  SELECT '` + account + `', 'Four Week Total Storage Cost Alert', CURRENT_TIMESTAMP(), NVL(SUM(TOTAL_STORAGE_COST_WEEK), 0) AS CURRENT_COST
                  FROM TODAY_STORAGE_BENCHMARK;
              END; 
        ALTER ALERT FOUR_WEEK_STORAGE_COST_ALERT RESUME;

        INSERT INTO observability_maintenance.logging_schema.logging_table
        VALUES ('federated_cost_alert_creation','SUCCESS', CURRENT_TIMESTAMP(),'`+account+`');
        return 'successfully created alert and integration'; 
        EXCEPTION
          WHEN STATEMENT_ERROR THEN 
            LET ERROR_MESSAGE := CURRENT_TIMESTAMP()||SQLCODE || ': '||SQLERRM;
            INSERT INTO OBSERVABILITY_MAINTENANCE.LOGGING_SCHEMA.LOGGING_TABLE
            VALUES('FEDERATED_COST_ALERT_CREATION','FAILED', CURRENT_TIMESTAMP() || :ERROR_MESSAGE,'`+account+`' );
            USE ROLE ACCOUNTADMIN;
            USE WAREHOUSE COMPUTE_WH;
            RETURN OBJECT_CONSTRUCT('ERROR TYPE','STATEMENT_ERROR',
                            'SQLCODE', sqlcode,
                            'SQLERRM' , sqlerrm,
                            'SQLSTATE', sqlstate);
    END`;
  var four_week_cost_alert_creation = snowflake.createStatement({sqlText: four_week_cost_alert});
  var result = four_week_cost_alert_creation.execute();

  var three_month_cost_alert = `
    BEGIN
    USE DATABASE ${costing_db_name};
    USE ROLE OBSERVABILITY_ADMIN;
    USE WAREHOUSE OBSERVABILITY_WH;
    USE SCHEMA SNOWFLAKE_COST_STD;

    CREATE OR REPLACE ALERT THREE_MONTH_TOTAL_COST_ALERT
        WAREHOUSE = OBSERVABILITY_WH
        SCHEDULE = 'USING CRON 0 17 * * * UTC'
        IF (EXISTS (
          WITH THREE_MONTH_COMPUTE_BENCHMARK AS (
            SELECT SUM((NVL(C.ALLOCATED_CREDITS_USED, 0) + NVL(C.ALLOCATED_CREDITS_USED_CLOUD_SERVICES, 0))*2)/3 AS TOTAL_COMPUTE_COST_MONTHS
            FROM ${costing_db_name}.SNOWFLAKE_COST_STD.SF_CREDITS_BY_QUERY_NEW C 
            WHERE MONTH(C.START_TIME) > (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, 12, MONTH(DATEADD("MONTH",-3,CURRENT_DATE())))) 
            AND YEAR(C.START_TIME) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
          ),
          THREE_MONTH_STORAGE_BENCHMARK AS (
            SELECT (MAX(NVL(A.DATABASE_STORAGE_PETABYTES, 0)*1000) + MAX(NVL(A.FAILSAFE_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(A.HYBRID_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(B.AVERAGE_STAGE_BYTES, 0) * 0.000000000001))*23/3 AS TOTAL_STORAGE_COST_MONTHS
            FROM ${costing_db_name}.SNOWFLAKE_COST_STD.DB_STORAGE_CALC A 
            RIGHT JOIN ${costing_db_name}.SNOWFLAKE_COST_STD.DAILY_STAGE_STORAGE B ON A.USAGE_DATE = B.USAGE_DATE
            WHERE MONTH(A.USAGE_DATE) > (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, 12, MONTH(DATEADD("MONTH",-3,CURRENT_DATE())))) 
            AND YEAR(B.USAGE_DATE) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
          ),
          TODAY_COMPUTE_BENCHMARK AS (
            SELECT SUM((NVL(C.ALLOCATED_CREDITS_USED, 0) + NVL(C.ALLOCATED_CREDITS_USED_CLOUD_SERVICES, 0))*2) AS TOTAL_COMPUTE_COST_MONTH
            FROM ${costing_db_name}.SNOWFLAKE_COST_STD.SF_CREDITS_BY_QUERY_NEW C 
            WHERE MONTH(C.START_TIME) = MONTH(CURRENT_DATE()) 
            AND YEAR(C.START_TIME) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
          ),
          TODAY_STORAGE_BENCHMARK AS (
            SELECT (MAX(NVL(A.DATABASE_STORAGE_PETABYTES, 0)*1000) + MAX(NVL(A.FAILSAFE_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(A.HYBRID_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(B.AVERAGE_STAGE_BYTES, 0) * 0.000000000001))*23 AS TOTAL_STORAGE_COST_MONTH
            FROM ${costing_db_name}.SNOWFLAKE_COST_STD.DB_STORAGE_CALC A 
            RIGHT JOIN ${costing_db_name}.SNOWFLAKE_COST_STD.DAILY_STAGE_STORAGE B ON A.USAGE_DATE = B.USAGE_DATE
            WHERE MONTH(B.USAGE_DATE) = MONTH(CURRENT_DATE())   
            AND YEAR(B.USAGE_DATE) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
          )
          SELECT NVL(SUM(TOTAL_COMPUTE_COST_MONTH), 0) + NVL(SUM(TOTAL_STORAGE_COST_MONTH), 0) AS CURRENT_COST, SUM(TOTAL_COMPUTE_COST_MONTHS) + SUM(TOTAL_STORAGE_COST_MONTHS) AS HISTORICAL_COST
          FROM THREE_MONTH_COMPUTE_BENCHMARK, THREE_MONTH_STORAGE_BENCHMARK, TODAY_COMPUTE_BENCHMARK, TODAY_STORAGE_BENCHMARK
          HAVING CURRENT_COST > HISTORICAL_COST
        ))
        THEN BEGIN
            CALL SYSTEM$SEND_EMAIL('slack_alert', '` + infra_email + `', 'Three month average total Cost Alert', 'The total cost for the federated account has exceeded the three month historical average');
            INSERT INTO OBSERVABILITY.OBSERVABILITY_CORE.OBSERVABILITY_METRICS (ACCOUNT, METRICNAME, TIMESTAMP, TOTALCOST)
                  WITH TODAY_COMPUTE_BENCHMARK AS (
                    SELECT SUM((NVL(C.ALLOCATED_CREDITS_USED, 0) + NVL(C.ALLOCATED_CREDITS_USED_CLOUD_SERVICES, 0))*2) AS TOTAL_COMPUTE_COST_MONTH
                    FROM ${costing_db_name}.SNOWFLAKE_COST_STD.SF_CREDITS_BY_QUERY_NEW C 
                    WHERE MONTH(C.START_TIME) = MONTH(CURRENT_DATE()) 
                    AND YEAR(C.START_TIME) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
                  ),
                  TODAY_STORAGE_BENCHMARK AS (
                    SELECT (MAX(NVL(A.DATABASE_STORAGE_PETABYTES, 0)*1000) + MAX(NVL(A.FAILSAFE_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(A.HYBRID_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(B.AVERAGE_STAGE_BYTES, 0) * 0.000000000001))*23 AS TOTAL_STORAGE_COST_MONTH
                    FROM ${costing_db_name}.SNOWFLAKE_COST_STD.DB_STORAGE_CALC A 
                    RIGHT JOIN ${costing_db_name}.SNOWFLAKE_COST_STD.DAILY_STAGE_STORAGE B ON A.USAGE_DATE = B.USAGE_DATE
                    WHERE MONTH(B.USAGE_DATE) = MONTH(CURRENT_DATE())   
                    AND YEAR(B.USAGE_DATE) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
                  )
                  SELECT '` + account + `', 'Three Month Total Cost Alert', CURRENT_TIMESTAMP(), NVL(SUM(TOTAL_COMPUTE_COST_MONTH), 0) + NVL(SUM(TOTAL_STORAGE_COST_MONTH), 0) AS CURRENT_COST
                  FROM TODAY_COMPUTE_BENCHMARK, TODAY_STORAGE_BENCHMARK;
            END;
        
      ALTER ALERT THREE_MONTH_TOTAL_COST_ALERT RESUME;

      CREATE OR REPLACE ALERT THREE_MONTH_COMPUTE_COST_ALERT
        WAREHOUSE = OBSERVABILITY_WH
        SCHEDULE = 'USING CRON 0 17 * * * UTC'
        IF (EXISTS (
          WITH THREE_MONTH_COMPUTE_BENCHMARK AS (
            SELECT SUM((NVL(C.ALLOCATED_CREDITS_USED, 0) + NVL(C.ALLOCATED_CREDITS_USED_CLOUD_SERVICES, 0))*2)/3 AS TOTAL_COMPUTE_COST_MONTHS
            FROM ${costing_db_name}.SNOWFLAKE_COST_STD.SF_CREDITS_BY_QUERY_NEW C 
            WHERE MONTH(C.START_TIME) > (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, 12, MONTH(DATEADD("MONTH",-3,CURRENT_DATE())))) 
            AND YEAR(C.START_TIME) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
          ),
          TODAY_COMPUTE_BENCHMARK AS (
            SELECT SUM((NVL(C.ALLOCATED_CREDITS_USED, 0) + NVL(C.ALLOCATED_CREDITS_USED_CLOUD_SERVICES, 0))*2) AS TOTAL_COMPUTE_COST_MONTH
            FROM ${costing_db_name}.SNOWFLAKE_COST_STD.SF_CREDITS_BY_QUERY_NEW C 
            WHERE MONTH(C.START_TIME) = MONTH(CURRENT_DATE()) 
            AND YEAR(C.START_TIME) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
          )
            SELECT NVL(SUM(TOTAL_COMPUTE_COST_MONTH), 0) AS CURRENT_COST, SUM(TOTAL_COMPUTE_COST_MONTHS) AS HISTORICAL_COST
            FROM THREE_MONTH_COMPUTE_BENCHMARK, TODAY_COMPUTE_BENCHMARK
            HAVING CURRENT_COST > HISTORICAL_COST
          ))
          THEN BEGIN
              CALL SYSTEM$SEND_EMAIL('slack_alert', '` + infra_email + `', 'Three month average total compute Cost Alert', 'The total compute cost for the federated account has exceeded the three month historical average');
              INSERT INTO OBSERVABILITY.OBSERVABILITY_CORE.OBSERVABILITY_METRICS (ACCOUNT, METRICNAME, TIMESTAMP, COMPUTECOST)
                    WITH TODAY_COMPUTE_BENCHMARK AS (
                      SELECT SUM((NVL(C.ALLOCATED_CREDITS_USED, 0) + NVL(C.ALLOCATED_CREDITS_USED_CLOUD_SERVICES, 0))*2) AS TOTAL_COMPUTE_COST_MONTH
                      FROM ${costing_db_name}.SNOWFLAKE_COST_STD.SF_CREDITS_BY_QUERY_NEW C 
                      WHERE MONTH(C.START_TIME) = MONTH(CURRENT_DATE()) 
                      AND YEAR(C.START_TIME) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
                    )
                    SELECT '` + account + `', 'Three Month Total Compute Cost Alert', CURRENT_TIMESTAMP(), NVL(SUM(TOTAL_COMPUTE_COST_MONTH), 0) AS CURRENT_COST
                    FROM TODAY_COMPUTE_BENCHMARK;
              END;
    
        ALTER ALERT THREE_MONTH_COMPUTE_COST_ALERT RESUME;

        CREATE or replace ALERT three_month_storage_cost_alert
          WAREHOUSE = OBSERVABILITY_WH
          SCHEDULE = 'USING CRON 0 17 * * * UTC'
          IF (EXISTS (
            WITH THREE_MONTH_STORAGE_BENCHMARK AS (
              SELECT (MAX(NVL(A.DATABASE_STORAGE_PETABYTES, 0)*1000) + MAX(NVL(A.FAILSAFE_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(A.HYBRID_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(B.AVERAGE_STAGE_BYTES, 0) * 0.000000000001))*23/3 AS TOTAL_STORAGE_COST_MONTHS
              FROM ${costing_db_name}.SNOWFLAKE_COST_STD.DB_STORAGE_CALC A 
              RIGHT JOIN ${costing_db_name}.SNOWFLAKE_COST_STD.DAILY_STAGE_STORAGE B ON A.USAGE_DATE = B.USAGE_DATE
              WHERE MONTH(A.USAGE_DATE) > (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, 12, MONTH(DATEADD("MONTH",-3,CURRENT_DATE())))) 
              AND YEAR(B.USAGE_DATE) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
            ),
            TODAY_STORAGE_BENCHMARK AS (
              SELECT (MAX(NVL(A.DATABASE_STORAGE_PETABYTES, 0)*1000) + MAX(NVL(A.FAILSAFE_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(A.HYBRID_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(B.AVERAGE_STAGE_BYTES, 0) * 0.000000000001))*23 AS TOTAL_STORAGE_COST_MONTH
              FROM ${costing_db_name}.SNOWFLAKE_COST_STD.DB_STORAGE_CALC A 
              RIGHT JOIN ${costing_db_name}.SNOWFLAKE_COST_STD.DAILY_STAGE_STORAGE B ON A.USAGE_DATE = B.USAGE_DATE
              WHERE MONTH(B.USAGE_DATE) = MONTH(CURRENT_DATE())   
              AND YEAR(B.USAGE_DATE) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
            )
            SELECT NVL(SUM(TOTAL_STORAGE_COST_MONTH), 0) AS CURRENT_COST, SUM(TOTAL_STORAGE_COST_MONTHS) AS HISTORICAL_COST
            FROM THREE_MONTH_STORAGE_BENCHMARK, TODAY_STORAGE_BENCHMARK
            HAVING CURRENT_COST > HISTORICAL_COST
          ))
          THEN BEGIN
              CALL SYSTEM$SEND_EMAIL('slack_alert', '` + infra_email + `', 'Three month average total storage Cost Alert', 'The total storage cost for the federated account has exceeded the three month historical average');
              INSERT INTO OBSERVABILITY.OBSERVABILITY_CORE.OBSERVABILITY_METRICS (ACCOUNT, METRICNAME, TIMESTAMP, STORAGECOST)
                    WITH TODAY_STORAGE_BENCHMARK AS (
                      SELECT (MAX(NVL(A.DATABASE_STORAGE_PETABYTES, 0)*1000) + MAX(NVL(A.FAILSAFE_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(A.HYBRID_STORAGE_PETABYTES, 0) * 1000) + MAX(NVL(B.AVERAGE_STAGE_BYTES, 0) * 0.000000000001))*23 AS TOTAL_STORAGE_COST_MONTH
                      FROM ${costing_db_name}.SNOWFLAKE_COST_STD.DB_STORAGE_CALC A 
                      RIGHT JOIN ${costing_db_name}.SNOWFLAKE_COST_STD.DAILY_STAGE_STORAGE B ON A.USAGE_DATE = B.USAGE_DATE
                      WHERE MONTH(B.USAGE_DATE) = MONTH(CURRENT_DATE())   
                      AND YEAR(B.USAGE_DATE) IN (SELECT IFF(MONTH(DATEADD("MONTH",-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
                    )
                    SELECT '` + account + `', 'Three Month Total Storage Cost Alert', CURRENT_TIMESTAMP(), NVL(SUM(TOTAL_STORAGE_COST_MONTH), 0) AS CURRENT_COST
                    FROM TODAY_STORAGE_BENCHMARK;
              END;    
        ALTER ALERT THREE_MONTH_STORAGE_COST_ALERT RESUME;

        INSERT INTO OBSERVABILITY_MAINTENANCE.LOGGING_SCHEMA.LOGGING_TABLE
        VALUES ('FEDERATED_COST_ALERT_CREATION','SUCCESS', CURRENT_TIMESTAMP(),'`+account+`');
        RETURN 'SUCCESSFULLY CREATED ALERT AND INTEGRATION'; 
        EXCEPTION
          WHEN STATEMENT_ERROR THEN 
            LET ERROR_MESSAGE := CURRENT_TIMESTAMP()||SQLCODE || ': '||SQLERRM;
            INSERT INTO OBSERVABILITY_MAINTENANCE.LOGGING_SCHEMA.LOGGING_TABLE
            VALUES('FEDERATED_COST_ALERT_CREATION','FAILED', CURRENT_TIMESTAMP() || :ERROR_MESSAGE,'`+account+`' );
            USE ROLE ACCOUNTADMIN;
            USE WAREHOUSE COMPUTE_WH;
            RETURN OBJECT_CONSTRUCT('ERROR TYPE','STATEMENT_ERROR',
                                  'SQLCODE', sqlcode,
                                  'SQLERRM' , sqlerrm,
                                  'SQLSTATE', sqlstate);
          end`;
      var three_month_cost_alert_creation = snowflake.createStatement({sqlText: three_month_cost_alert});
      var result = three_month_cost_alert_creation.execute();
    $$;
}