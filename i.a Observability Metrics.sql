CALL OBSERVABILITY_SETUP.setup_procedures_v1.CHILD_KH_SNOWFLAKE_COSTING_METRICS_CREATE_PROCEDURE();
CREATE OR REPLACE PROCEDURE OBSERVABILITY_SETUP.setup_procedures_v1.CHILD_KH_SNOWFLAKE_COSTING_METRICS_CREATE_PROCEDURE()
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS 
$$
var costing_db_name = "KH_SNOWFLAKE_COSTING";

var account_query = "SELECT CURRENT_ACCOUNT()";
var statement = snowflake.createStatement({sqlText: account_query});
var account = statement.execute();
account.next();
var account_name = account.getColumnValue(1);

var query_db = `SELECT CURRENT_ACCOUNT() || '_${costing_db_name}'`;
var statement1 = snowflake.createStatement({sqlText: query_db});
var db = statement1.execute();
db.next();
var db_name = db.getColumnValue(1);

var query = `
BEGIN
INSERT INTO ${db_name}.SNOWFLAKE_COST_STD.DB_STORAGE_CALC (
SELECT USAGE_DATE,
DATABASE_NAME,
SUM(AVERAGE_DATABASE_BYTES)/1024/1024/1024/1024/1024 AS DATABASE_STORAGE_PETABYTES,
SUM(AVERAGE_FAILSAFE_BYTES)/1024/1024/1024/1024/1024 AS FAILSAFE_STORAGE_PETABYTES,
SUM(AVERAGE_HYBRID_TABLE_STORAGE_BYTES)/1024/1024/1024/1024/1024 AS HYBRID_STORAGE_PETABYTES,                  
CURRENT_ACCOUNT()
FROM SNOWFLAKE.ACCOUNT_USAGE.DATABASE_STORAGE_USAGE_HISTORY 
WHERE MONTH(USAGE_DATE) IN (SELECT IFF(MONTH(DATEADD('MONTH',-1,CURRENT_DATE())) = 0, 12, MONTH(DATEADD('MONTH',0,CURRENT_DATE()))))  
AND YEAR(USAGE_DATE) IN (SELECT IFF(MONTH(DATEADD('MONTH',-1,CURRENT_DATE())) = 0, YEAR(CURRENT_DATE())-1, YEAR(CURRENT_DATE()))) 
GROUP BY USAGE_DATE, DATABASE_NAME 
ORDER BY 1
);

INSERT INTO ${db_name}.SNOWFLAKE_COST_STD.DAILY_STAGE_STORAGE (
SELECT CURRENT_ACCOUNT(), 
USAGE_DATE,
AVERAGE_STAGE_BYTES 
FROM SNOWFLAKE.ACCOUNT_USAGE.STAGE_STORAGE_USAGE_HISTORY
WHERE USAGE_DATE BETWEEN (IFF((SELECT DATEADD('DAY',1,MAX(USAGE_DATE)) FROM ${db_name}.SNOWFLAKE_COST_STD.DAILY_STAGE_STORAGE) IS NULL, (SELECT MIN(USAGE_DATE) FROM SNOWFLAKE.ACCOUNT_USAGE.STAGE_STORAGE_USAGE_HISTORY), (SELECT DATEADD('DAY',1,MAX(USAGE_DATE)) FROM ${db_name}.SNOWFLAKE_COST_STD.DAILY_STAGE_STORAGE))) 
AND (SELECT MAX(USAGE_DATE) FROM SNOWFLAKE.ACCOUNT_USAGE.STAGE_STORAGE_USAGE_HISTORY) 
ORDER BY 2
);

INSERT INTO ${db_name}.SNOWFLAKE_COST_STD.AUTOMATIC_CLUSTERING_WAREHOUSE_DTLS (
SELECT CURRENT_ACCOUNT() AS ACCOUNT_NAME,  
START_TIME, 
END_TIME, 
CREDITS_USED, 
NUM_BYTES_RECLUSTERED, 
NUM_ROWS_RECLUSTERED, 
TABLE_ID, 
TABLE_NAME, 
SCHEMA_ID, 
SCHEMA_NAME, 
DATABASE_ID, 
DATABASE_NAME 
FROM SNOWFLAKE.ACCOUNT_USAGE.AUTOMATIC_CLUSTERING_HISTORY ACH
WHERE START_TIME BETWEEN (IFF((SELECT DATEADD('DAY',1,MAX(START_TIME)) FROM ${db_name}.SNOWFLAKE_COST_STD.AUTOMATIC_CLUSTERING_WAREHOUSE_DTLS) IS NULL, (SELECT MIN(START_TIME) FROM SNOWFLAKE.ACCOUNT_USAGE.AUTOMATIC_CLUSTERING_HISTORY), (SELECT DATEADD('DAY',1,MAX(START_TIME)) FROM ${db_name}.SNOWFLAKE_COST_STD.AUTOMATIC_CLUSTERING_WAREHOUSE_DTLS))) 
AND (SELECT MAX(START_TIME) FROM SNOWFLAKE.ACCOUNT_USAGE.AUTOMATIC_CLUSTERING_HISTORY) 
ORDER BY 2
);
RETURN 'SUCCESSFUL UPDATE';
END;
`;

var statement2 = snowflake.createStatement({sqlText: query});
var result = statement2.execute();
result.next();
return result.getColumnValue(1);
$$;